
RxUARTisr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007814  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080079f4  080079f4  000089f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa4  08007aa4  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa4  08007aa4  00008aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aac  08007aac  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aac  08007aac  00008aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ab0  08007ab0  00008ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007ab4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a5c  20000010  08007ac4  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a6c  08007ac4  00009a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdce  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af8  00000000  00000000  00025e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00029908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001301  00000000  00000000  0002b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035a1  00000000  00000000  0002c471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab9d  00000000  00000000  0002fa12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105bf7  00000000  00000000  0004a5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001501a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c4  00000000  00000000  001501ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001569b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080079dc 	.word	0x080079dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080079dc 	.word	0x080079dc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 facd 	bl	8000ab2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f82e 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f8c4 	bl	80006a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f876 	bl	8000610 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &g_received_byte, 1);
 8000524:	2201      	movs	r2, #1
 8000526:	490d      	ldr	r1, [pc, #52]	@ (800055c <main+0x4c>)
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <main+0x50>)
 800052a:	f002 fa4b 	bl	80029c4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052e:	f004 faf9 	bl	8004b24 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueUARTrx */
  queueUARTrxHandle = osMessageQueueNew (16, sizeof(uint8_t), &queueUARTrx_attributes);
 8000532:	4a0c      	ldr	r2, [pc, #48]	@ (8000564 <main+0x54>)
 8000534:	2101      	movs	r1, #1
 8000536:	2010      	movs	r0, #16
 8000538:	f004 fbd0 	bl	8004cdc <osMessageQueueNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <main+0x58>)
 8000540:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskProcessUART */
  taskProcessUARTHandle = osThreadNew(processUARTrx, NULL, &taskProcessUART_attributes);
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <main+0x5c>)
 8000544:	2100      	movs	r1, #0
 8000546:	480a      	ldr	r0, [pc, #40]	@ (8000570 <main+0x60>)
 8000548:	f004 fb36 	bl	8004bb8 <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <main+0x64>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f004 fb0b 	bl	8004b6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <main+0x46>
 800055a:	bf00      	nop
 800055c:	200000c8 	.word	0x200000c8
 8000560:	2000002c 	.word	0x2000002c
 8000564:	08007a4c 	.word	0x08007a4c
 8000568:	200000c4 	.word	0x200000c4
 800056c:	08007a28 	.word	0x08007a28
 8000570:	08000795 	.word	0x08000795
 8000574:	200000c0 	.word	0x200000c0

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	2238      	movs	r2, #56	@ 0x38
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f007 f9ee 	bl	8007968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fe14 	bl	80011c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2340      	movs	r3, #64	@ 0x40
 80005ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ba:	2355      	movs	r3, #85	@ 0x55
 80005bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 feae 	bl	8001330 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005da:	f000 f903 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f9ac 	bl	8001954 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000602:	f000 f8ef 	bl	80007e4 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	@ 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 8000616:	4a23      	ldr	r2, [pc, #140]	@ (80006a4 <MX_USART2_UART_Init+0x94>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000658:	4811      	ldr	r0, [pc, #68]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 800065a:	f002 f963 	bl	8002924 <HAL_UART_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000664:	f000 f8be 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000668:	2100      	movs	r1, #0
 800066a:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 800066c:	f004 f94b 	bl	8004906 <HAL_UARTEx_SetTxFifoThreshold>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000676:	f000 f8b5 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800067a:	2100      	movs	r1, #0
 800067c:	4808      	ldr	r0, [pc, #32]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 800067e:	f004 f980 	bl	8004982 <HAL_UARTEx_SetRxFifoThreshold>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000688:	f000 f8ac 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_USART2_UART_Init+0x90>)
 800068e:	f004 f901 	bl	8004894 <HAL_UARTEx_DisableFifoMode>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000698:	f000 f8a4 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000002c 	.word	0x2000002c
 80006a4:	40004400 	.word	0x40004400

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <MX_GPIO_Init+0xa8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a23      	ldr	r2, [pc, #140]	@ (8000750 <MX_GPIO_Init+0xa8>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <MX_GPIO_Init+0xa8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <MX_GPIO_Init+0xa8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a1d      	ldr	r2, [pc, #116]	@ (8000750 <MX_GPIO_Init+0xa8>)
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <MX_GPIO_Init+0xa8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0320 	and.w	r3, r3, #32
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_GPIO_Init+0xa8>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a17      	ldr	r2, [pc, #92]	@ (8000750 <MX_GPIO_Init+0xa8>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_GPIO_Init+0xa8>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_GPIO_Init+0xa8>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a11      	ldr	r2, [pc, #68]	@ (8000750 <MX_GPIO_Init+0xa8>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_GPIO_Init+0xa8>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f000 fd1d 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800072a:	2320      	movs	r3, #32
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000744:	f000 fb8c 	bl	8000e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <HAL_UART_RxCpltCallback+0x34>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d10b      	bne.n	8000780 <HAL_UART_RxCpltCallback+0x2c>
	{
		osMessageQueuePut(queueUARTrxHandle, &g_received_byte, 0, 0);
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_UART_RxCpltCallback+0x38>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	2300      	movs	r3, #0
 800076e:	2200      	movs	r2, #0
 8000770:	4907      	ldr	r1, [pc, #28]	@ (8000790 <HAL_UART_RxCpltCallback+0x3c>)
 8000772:	f004 fb27 	bl	8004dc4 <osMessageQueuePut>
		HAL_UART_Receive_IT(&huart2, &g_received_byte, 1);
 8000776:	2201      	movs	r2, #1
 8000778:	4905      	ldr	r1, [pc, #20]	@ (8000790 <HAL_UART_RxCpltCallback+0x3c>)
 800077a:	4803      	ldr	r0, [pc, #12]	@ (8000788 <HAL_UART_RxCpltCallback+0x34>)
 800077c:	f002 f922 	bl	80029c4 <HAL_UART_Receive_IT>
	}
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000002c 	.word	0x2000002c
 800078c:	200000c4 	.word	0x200000c4
 8000790:	200000c8 	.word	0x200000c8

08000794 <processUARTrx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_processUARTrx */
void processUARTrx(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t received_byte;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(queueUARTrxHandle, &received_byte, NULL, osWaitForever);
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <processUARTrx+0x28>)
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	f107 010f 	add.w	r1, r7, #15
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a8:	2200      	movs	r2, #0
 80007aa:	f004 fb6b 	bl	8004e84 <osMessageQueueGet>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80007ae:	2120      	movs	r1, #32
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b4:	f000 fcee 	bl	8001194 <HAL_GPIO_TogglePin>
    osMessageQueueGet(queueUARTrxHandle, &received_byte, NULL, osWaitForever);
 80007b8:	bf00      	nop
 80007ba:	e7ef      	b.n	800079c <processUARTrx+0x8>
 80007bc:	200000c4 	.word	0x200000c4

080007c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d101      	bne.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d2:	f000 f987 	bl	8000ae4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40001000 	.word	0x40001000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <HAL_MspInit+0x50>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <HAL_MspInit+0x50>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	@ 0x60
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <HAL_MspInit+0x50>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <HAL_MspInit+0x50>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000812:	4a0b      	ldr	r2, [pc, #44]	@ (8000840 <HAL_MspInit+0x50>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	@ 0x58
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x50>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fa2f 	bl	8000c90 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000832:	f000 fd6d 	bl	8001310 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b09e      	sub	sp, #120	@ 0x78
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	2254      	movs	r2, #84	@ 0x54
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f007 f87f 	bl	8007968 <memset>
  if(huart->Instance==USART2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a23      	ldr	r2, [pc, #140]	@ (80008fc <HAL_UART_MspInit+0xb8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d13e      	bne.n	80008f2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000874:	2302      	movs	r3, #2
 8000876:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fab5 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800088c:	f7ff ffaa 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <HAL_UART_MspInit+0xbc>)
 8000892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000894:	4a1a      	ldr	r2, [pc, #104]	@ (8000900 <HAL_UART_MspInit+0xbc>)
 8000896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800089a:	6593      	str	r3, [r2, #88]	@ 0x58
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <HAL_UART_MspInit+0xbc>)
 800089e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_UART_MspInit+0xbc>)
 80008aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ac:	4a14      	ldr	r2, [pc, #80]	@ (8000900 <HAL_UART_MspInit+0xbc>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_UART_MspInit+0xbc>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c0:	230c      	movs	r3, #12
 80008c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d0:	2307      	movs	r3, #7
 80008d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f000 fabf 	bl	8000e60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2105      	movs	r1, #5
 80008e6:	2026      	movs	r0, #38	@ 0x26
 80008e8:	f000 f9d2 	bl	8000c90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ec:	2026      	movs	r0, #38	@ 0x26
 80008ee:	f000 f9e9 	bl	8000cc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008f2:	bf00      	nop
 80008f4:	3778      	adds	r7, #120	@ 0x78
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40004400 	.word	0x40004400
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	@ 0x30
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000914:	4b2c      	ldr	r3, [pc, #176]	@ (80009c8 <HAL_InitTick+0xc4>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000918:	4a2b      	ldr	r2, [pc, #172]	@ (80009c8 <HAL_InitTick+0xc4>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000920:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <HAL_InitTick+0xc4>)
 8000922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800092c:	f107 020c 	add.w	r2, r7, #12
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f9e2 	bl	8001d00 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800093c:	f001 f9b4 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8000940:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000944:	4a21      	ldr	r2, [pc, #132]	@ (80009cc <HAL_InitTick+0xc8>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	3b01      	subs	r3, #1
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <HAL_InitTick+0xcc>)
 8000952:	4a20      	ldr	r2, [pc, #128]	@ (80009d4 <HAL_InitTick+0xd0>)
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <HAL_InitTick+0xcc>)
 8000958:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800095e:	4a1c      	ldr	r2, [pc, #112]	@ (80009d0 <HAL_InitTick+0xcc>)
 8000960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000962:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000964:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <HAL_InitTick+0xcc>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <HAL_InitTick+0xcc>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000970:	4817      	ldr	r0, [pc, #92]	@ (80009d0 <HAL_InitTick+0xcc>)
 8000972:	f001 fc8b 	bl	800228c <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800097c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000980:	2b00      	cmp	r3, #0
 8000982:	d11b      	bne.n	80009bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000984:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <HAL_InitTick+0xcc>)
 8000986:	f001 fce3 	bl	8002350 <HAL_TIM_Base_Start_IT>
 800098a:	4603      	mov	r3, r0
 800098c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000994:	2b00      	cmp	r3, #0
 8000996:	d111      	bne.n	80009bc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000998:	2036      	movs	r0, #54	@ 0x36
 800099a:	f000 f993 	bl	8000cc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d808      	bhi.n	80009b6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	2036      	movs	r0, #54	@ 0x36
 80009aa:	f000 f971 	bl	8000c90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_InitTick+0xd4>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	e002      	b.n	80009bc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3730      	adds	r7, #48	@ 0x30
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000
 80009cc:	431bde83 	.word	0x431bde83
 80009d0:	200000cc 	.word	0x200000cc
 80009d4:	40001000 	.word	0x40001000
 80009d8:	20000004 	.word	0x20000004

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <NMI_Handler+0x4>

080009e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <MemManage_Handler+0x4>

080009f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <USART2_IRQHandler+0x10>)
 8000a1a:	f002 f81f 	bl	8002a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000002c 	.word	0x2000002c

08000a28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <TIM6_DAC_IRQHandler+0x10>)
 8000a2e:	f001 fd07 	bl	8002440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000cc 	.word	0x200000cc

08000a3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a60:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff ffea 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	@ (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	@ (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f006 ff73 	bl	8007978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a92:	f7ff fd3d 	bl	8000510 <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   r0, =_estack
 8000a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aa4:	08007ab4 	.word	0x08007ab4
  ldr r2, =_sbss
 8000aa8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aac:	20001a6c 	.word	0x20001a6c

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>

08000ab2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f8dc 	bl	8000c7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f7ff ff1e 	bl	8000904 <HAL_InitTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	e001      	b.n	8000ad8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad4:	f7ff fe8c 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]

}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_IncTick+0x20>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a03      	ldr	r2, [pc, #12]	@ (8000b00 <HAL_IncTick+0x1c>)
 8000af4:	6013      	str	r3, [r2, #0]
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	20000118 	.word	0x20000118
 8000b04:	20000008 	.word	0x20000008

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000118 	.word	0x20000118

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	@ (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	@ (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ff4c 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9e:	f7ff ff63 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000ca2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	6978      	ldr	r0, [r7, #20]
 8000caa:	f7ff ffb3 	bl	8000c14 <NVIC_EncodePriority>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff82 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff56 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d005      	beq.n	8000d04 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e037      	b.n	8000d74 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 020e 	bic.w	r2, r2, #14
 8000d12:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d22:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0201 	bic.w	r2, r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	2101      	movs	r1, #1
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000d50:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00c      	beq.n	8000d74 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d68:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000d72:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d00d      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2204      	movs	r2, #4
 8000dae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e047      	b.n	8000e56 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 020e 	bic.w	r2, r2, #14
 8000dd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0201 	bic.w	r2, r2, #1
 8000de4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000df4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	f003 021f 	and.w	r2, r3, #31
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00c      	beq.n	8000e36 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	4798      	blx	r3
    }
  }
  return status;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e6e:	e15a      	b.n	8001126 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2101      	movs	r1, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 814c 	beq.w	8001120 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d005      	beq.n	8000ea0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d130      	bne.n	8000f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	091b      	lsrs	r3, r3, #4
 8000eec:	f003 0201 	and.w	r2, r3, #1
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d017      	beq.n	8000f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	6939      	ldr	r1, [r7, #16]
 8000f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0203 	and.w	r2, r3, #3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 80a6 	beq.w	8001120 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8001144 <HAL_GPIO_Init+0x2e4>)
 8000fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd8:	4a5a      	ldr	r2, [pc, #360]	@ (8001144 <HAL_GPIO_Init+0x2e4>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fe0:	4b58      	ldr	r3, [pc, #352]	@ (8001144 <HAL_GPIO_Init+0x2e4>)
 8000fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fec:	4a56      	ldr	r2, [pc, #344]	@ (8001148 <HAL_GPIO_Init+0x2e8>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001016:	d01f      	beq.n	8001058 <HAL_GPIO_Init+0x1f8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4c      	ldr	r2, [pc, #304]	@ (800114c <HAL_GPIO_Init+0x2ec>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d019      	beq.n	8001054 <HAL_GPIO_Init+0x1f4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <HAL_GPIO_Init+0x2f0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d013      	beq.n	8001050 <HAL_GPIO_Init+0x1f0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a4a      	ldr	r2, [pc, #296]	@ (8001154 <HAL_GPIO_Init+0x2f4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d00d      	beq.n	800104c <HAL_GPIO_Init+0x1ec>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a49      	ldr	r2, [pc, #292]	@ (8001158 <HAL_GPIO_Init+0x2f8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d007      	beq.n	8001048 <HAL_GPIO_Init+0x1e8>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a48      	ldr	r2, [pc, #288]	@ (800115c <HAL_GPIO_Init+0x2fc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d101      	bne.n	8001044 <HAL_GPIO_Init+0x1e4>
 8001040:	2305      	movs	r3, #5
 8001042:	e00a      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001044:	2306      	movs	r3, #6
 8001046:	e008      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001048:	2304      	movs	r3, #4
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 800104c:	2303      	movs	r3, #3
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001050:	2302      	movs	r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001058:	2300      	movs	r3, #0
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106a:	4937      	ldr	r1, [pc, #220]	@ (8001148 <HAL_GPIO_Init+0x2e8>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001078:	4b39      	ldr	r3, [pc, #228]	@ (8001160 <HAL_GPIO_Init+0x300>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800109c:	4a30      	ldr	r2, [pc, #192]	@ (8001160 <HAL_GPIO_Init+0x300>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001160 <HAL_GPIO_Init+0x300>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c6:	4a26      	ldr	r2, [pc, #152]	@ (8001160 <HAL_GPIO_Init+0x300>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010cc:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <HAL_GPIO_Init+0x300>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <HAL_GPIO_Init+0x300>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <HAL_GPIO_Init+0x300>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111a:	4a11      	ldr	r2, [pc, #68]	@ (8001160 <HAL_GPIO_Init+0x300>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f ae9d 	bne.w	8000e70 <HAL_GPIO_Init+0x10>
  }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000
 800114c:	48000400 	.word	0x48000400
 8001150:	48000800 	.word	0x48000800
 8001154:	48000c00 	.word	0x48000c00
 8001158:	48001000 	.word	0x48001000
 800115c:	48001400 	.word	0x48001400
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001180:	e002      	b.n	8001188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43d9      	mvns	r1, r3
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	400b      	ands	r3, r1
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d141      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e2:	d131      	bne.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011e4:	4b47      	ldr	r3, [pc, #284]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ea:	4a46      	ldr	r2, [pc, #280]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011fc:	4a41      	ldr	r2, [pc, #260]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001202:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001204:	4b40      	ldr	r3, [pc, #256]	@ (8001308 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2232      	movs	r2, #50	@ 0x32
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	4a3f      	ldr	r2, [pc, #252]	@ (800130c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	0c9b      	lsrs	r3, r3, #18
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800121a:	e002      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3b01      	subs	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001222:	4b38      	ldr	r3, [pc, #224]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800122e:	d102      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f2      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001236:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800123e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001242:	d158      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e057      	b.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001248:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800124e:	4a2d      	ldr	r2, [pc, #180]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001258:	e04d      	b.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001260:	d141      	bne.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001262:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800126a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126e:	d131      	bne.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001280:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001288:	4a1e      	ldr	r2, [pc, #120]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2232      	movs	r2, #50	@ 0x32
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	0c9b      	lsrs	r3, r3, #18
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a6:	e002      	b.n	80012ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ba:	d102      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f2      	bne.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ce:	d112      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e011      	b.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012e4:	e007      	b.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40007000 	.word	0x40007000
 8001308:	20000000 	.word	0x20000000
 800130c:	431bde83 	.word	0x431bde83

08001310 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131e:	6093      	str	r3, [r2, #8]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40007000 	.word	0x40007000

08001330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e2fe      	b.n	8001940 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d075      	beq.n	800143a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134e:	4b97      	ldr	r3, [pc, #604]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001358:	4b94      	ldr	r3, [pc, #592]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d102      	bne.n	800136e <HAL_RCC_OscConfig+0x3e>
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d002      	beq.n	8001374 <HAL_RCC_OscConfig+0x44>
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b08      	cmp	r3, #8
 8001372:	d10b      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	4b8d      	ldr	r3, [pc, #564]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d05b      	beq.n	8001438 <HAL_RCC_OscConfig+0x108>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d157      	bne.n	8001438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e2d9      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x74>
 8001396:	4b85      	ldr	r3, [pc, #532]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a84      	ldr	r2, [pc, #528]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01d      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x98>
 80013ae:	4b7f      	ldr	r3, [pc, #508]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7e      	ldr	r2, [pc, #504]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b7c      	ldr	r3, [pc, #496]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a7b      	ldr	r2, [pc, #492]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013c8:	4b78      	ldr	r3, [pc, #480]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a77      	ldr	r2, [pc, #476]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b75      	ldr	r3, [pc, #468]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a74      	ldr	r2, [pc, #464]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb8e 	bl	8000b08 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fb8a 	bl	8000b08 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e29e      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001402:	4b6a      	ldr	r3, [pc, #424]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0xc0>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fb7a 	bl	8000b08 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fb76 	bl	8000b08 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e28a      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142a:	4b60      	ldr	r3, [pc, #384]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0xe8>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d075      	beq.n	8001532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001446:	4b59      	ldr	r3, [pc, #356]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001450:	4b56      	ldr	r3, [pc, #344]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d102      	bne.n	8001466 <HAL_RCC_OscConfig+0x136>
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d002      	beq.n	800146c <HAL_RCC_OscConfig+0x13c>
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d11f      	bne.n	80014ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146c:	4b4f      	ldr	r3, [pc, #316]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_OscConfig+0x154>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e25d      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b49      	ldr	r3, [pc, #292]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	4946      	ldr	r1, [pc, #280]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001498:	4b45      	ldr	r3, [pc, #276]	@ (80015b0 <HAL_RCC_OscConfig+0x280>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fa31 	bl	8000904 <HAL_InitTick>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d043      	beq.n	8001530 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e249      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d023      	beq.n	80014fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a3c      	ldr	r2, [pc, #240]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb22 	bl	8000b08 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fb1e 	bl	8000b08 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e232      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014da:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	061b      	lsls	r3, r3, #24
 80014f4:	492d      	ldr	r1, [pc, #180]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
 80014fa:	e01a      	b.n	8001532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fc:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2a      	ldr	r2, [pc, #168]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001502:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fafe 	bl	8000b08 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fafa 	bl	8000b08 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e20e      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001522:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x1e0>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d041      	beq.n	80015c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01c      	beq.n	8001580 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff fad7 	bl	8000b08 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff fad3 	bl	8000b08 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1e7      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0ef      	beq.n	800155e <HAL_RCC_OscConfig+0x22e>
 800157e:	e020      	b.n	80015c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff faba 	bl	8000b08 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001596:	e00d      	b.n	80015b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fab6 	bl	8000b08 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d906      	bls.n	80015b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1ca      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	4b8c      	ldr	r3, [pc, #560]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ea      	bne.n	8001598 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80a6 	beq.w	800171c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015d4:	4b84      	ldr	r3, [pc, #528]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2b4>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x2b6>
 80015e4:	2300      	movs	r3, #0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00d      	beq.n	8001606 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b7f      	ldr	r3, [pc, #508]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ee:	4a7e      	ldr	r2, [pc, #504]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f6:	4b7c      	ldr	r3, [pc, #496]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001602:	2301      	movs	r3, #1
 8001604:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001606:	4b79      	ldr	r3, [pc, #484]	@ (80017ec <HAL_RCC_OscConfig+0x4bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d118      	bne.n	8001644 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001612:	4b76      	ldr	r3, [pc, #472]	@ (80017ec <HAL_RCC_OscConfig+0x4bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a75      	ldr	r2, [pc, #468]	@ (80017ec <HAL_RCC_OscConfig+0x4bc>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161e:	f7ff fa73 	bl	8000b08 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001626:	f7ff fa6f 	bl	8000b08 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e183      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001638:	4b6c      	ldr	r3, [pc, #432]	@ (80017ec <HAL_RCC_OscConfig+0x4bc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d108      	bne.n	800165e <HAL_RCC_OscConfig+0x32e>
 800164c:	4b66      	ldr	r3, [pc, #408]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001652:	4a65      	ldr	r2, [pc, #404]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165c:	e024      	b.n	80016a8 <HAL_RCC_OscConfig+0x378>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d110      	bne.n	8001688 <HAL_RCC_OscConfig+0x358>
 8001666:	4b60      	ldr	r3, [pc, #384]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166c:	4a5e      	ldr	r2, [pc, #376]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001676:	4b5c      	ldr	r3, [pc, #368]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167c:	4a5a      	ldr	r2, [pc, #360]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001686:	e00f      	b.n	80016a8 <HAL_RCC_OscConfig+0x378>
 8001688:	4b57      	ldr	r3, [pc, #348]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	4a56      	ldr	r2, [pc, #344]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001698:	4b53      	ldr	r3, [pc, #332]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169e:	4a52      	ldr	r2, [pc, #328]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d016      	beq.n	80016de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fa2a 	bl	8000b08 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fa26 	bl	8000b08 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e138      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	4b46      	ldr	r3, [pc, #280]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ed      	beq.n	80016b8 <HAL_RCC_OscConfig+0x388>
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fa13 	bl	8000b08 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fa0f 	bl	8000b08 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e121      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fc:	4b3a      	ldr	r3, [pc, #232]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ed      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	4a34      	ldr	r2, [pc, #208]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01c      	beq.n	800176a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001730:	4b2d      	ldr	r3, [pc, #180]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001736:	4a2c      	ldr	r2, [pc, #176]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff f9e2 	bl	8000b08 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001748:	f7ff f9de 	bl	8000b08 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e0f2      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800175a:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800175c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ef      	beq.n	8001748 <HAL_RCC_OscConfig+0x418>
 8001768:	e01b      	b.n	80017a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800176c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001770:	4a1d      	ldr	r2, [pc, #116]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff f9c5 	bl	8000b08 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001782:	f7ff f9c1 	bl	8000b08 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0d5      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001796:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ef      	bne.n	8001782 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80c9 	beq.w	800193e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	f000 8083 	beq.w	80018c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d15e      	bne.n	8001880 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a08      	ldr	r2, [pc, #32]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80017c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f99b 	bl	8000b08 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	e00c      	b.n	80017f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f997 	bl	8000b08 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d905      	bls.n	80017f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0ab      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	4b55      	ldr	r3, [pc, #340]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ec      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fc:	4b52      	ldr	r3, [pc, #328]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4b52      	ldr	r3, [pc, #328]	@ (800194c <HAL_RCC_OscConfig+0x61c>)
 8001802:	4013      	ands	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6a11      	ldr	r1, [r2, #32]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800180c:	3a01      	subs	r2, #1
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	4311      	orrs	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001816:	0212      	lsls	r2, r2, #8
 8001818:	4311      	orrs	r1, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800181e:	0852      	lsrs	r2, r2, #1
 8001820:	3a01      	subs	r2, #1
 8001822:	0552      	lsls	r2, r2, #21
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800182a:	0852      	lsrs	r2, r2, #1
 800182c:	3a01      	subs	r2, #1
 800182e:	0652      	lsls	r2, r2, #25
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001836:	06d2      	lsls	r2, r2, #27
 8001838:	430a      	orrs	r2, r1
 800183a:	4943      	ldr	r1, [pc, #268]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 800183c:	4313      	orrs	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a40      	ldr	r2, [pc, #256]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800184c:	4b3e      	ldr	r3, [pc, #248]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001856:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f956 	bl	8000b08 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f952 	bl	8000b08 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e066      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x530>
 800187e:	e05e      	b.n	800193e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001880:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a30      	ldr	r2, [pc, #192]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f93c 	bl	8000b08 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f938 	bl	8000b08 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04c      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a6:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018b2:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	4924      	ldr	r1, [pc, #144]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80018b8:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HAL_RCC_OscConfig+0x620>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
 80018be:	e03e      	b.n	800193e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e039      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d12c      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	3b01      	subs	r3, #1
 80018ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d123      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d11b      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d113      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d109      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	019f800c 	.word	0x019f800c
 8001950:	feeefffc 	.word	0xfeeefffc

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e11e      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b91      	ldr	r3, [pc, #580]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d910      	bls.n	800199c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b8e      	ldr	r3, [pc, #568]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 020f 	bic.w	r2, r3, #15
 8001982:	498c      	ldr	r1, [pc, #560]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b8a      	ldr	r3, [pc, #552]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e106      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d073      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d129      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b0:	4b81      	ldr	r3, [pc, #516]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0f4      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019c0:	f000 f9d0 	bl	8001d64 <RCC_GetSysClockFreqFromPLLSource>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4a7c      	ldr	r2, [pc, #496]	@ (8001bbc <HAL_RCC_ClockConfig+0x268>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d93f      	bls.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019ce:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d033      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d12f      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ee:	4b72      	ldr	r3, [pc, #456]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019f6:	4a70      	ldr	r2, [pc, #448]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 80019f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e024      	b.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0c6      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1c:	4b66      	ldr	r3, [pc, #408]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0be      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a2c:	f000 f8ce 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4a61      	ldr	r2, [pc, #388]	@ (8001bbc <HAL_RCC_ClockConfig+0x268>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d909      	bls.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a42:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a4a:	2380      	movs	r3, #128	@ 0x80
 8001a4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4957      	ldr	r1, [pc, #348]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a60:	f7ff f852 	bl	8000b08 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff f84e 	bl	8000b08 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e095      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d023      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a42      	ldr	r2, [pc, #264]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001aae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ab2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ac8:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001aca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ace:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b39      	ldr	r3, [pc, #228]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4936      	ldr	r1, [pc, #216]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b80      	cmp	r3, #128	@ 0x80
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aea:	4b33      	ldr	r3, [pc, #204]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4a32      	ldr	r2, [pc, #200]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001af0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001af4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af6:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d21d      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 020f 	bic.w	r2, r3, #15
 8001b0c:	4929      	ldr	r1, [pc, #164]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b14:	f7fe fff8 	bl	8000b08 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7fe fff4 	bl	8000b08 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e03b      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1ed      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4917      	ldr	r1, [pc, #92]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6a:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490f      	ldr	r1, [pc, #60]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b7e:	f000 f825 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <HAL_RCC_ClockConfig+0x26c>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <HAL_RCC_ClockConfig+0x270>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <HAL_RCC_ClockConfig+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe feae 	bl	8000904 <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	04c4b400 	.word	0x04c4b400
 8001bc0:	08007a64 	.word	0x08007a64
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d102      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bde:	4b2a      	ldr	r3, [pc, #168]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e047      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001be4:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf0:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e03e      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bf6:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d136      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3301      	adds	r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d10c      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c20:	4a1a      	ldr	r2, [pc, #104]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	4a16      	ldr	r2, [pc, #88]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2a:	68d2      	ldr	r2, [r2, #12]
 8001c2c:	0a12      	lsrs	r2, r2, #8
 8001c2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
      break;
 8001c38:	e00c      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c3a:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c44:	68d2      	ldr	r2, [r2, #12]
 8001c46:	0a12      	lsrs	r2, r2, #8
 8001c48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
      break;
 8001c52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0e5b      	lsrs	r3, r3, #25
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e001      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c74:	693b      	ldr	r3, [r7, #16]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	00f42400 	.word	0x00f42400
 8001c8c:	016e3600 	.word	0x016e3600

08001c90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cac:	f7ff fff0 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4904      	ldr	r1, [pc, #16]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08007a74 	.word	0x08007a74

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cd8:	f7ff ffda 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0adb      	lsrs	r3, r3, #11
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4904      	ldr	r1, [pc, #16]	@ (8001cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08007a74 	.word	0x08007a74

08001d00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d42:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <HAL_RCC_GetClockConfig+0x60>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40022000 	.word	0x40022000

08001d64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d10c      	bne.n	8001da2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d88:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d92:	68d2      	ldr	r2, [r2, #12]
 8001d94:	0a12      	lsrs	r2, r2, #8
 8001d96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
    break;
 8001da0:	e00c      	b.n	8001dbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4a0e      	ldr	r2, [pc, #56]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dac:	68d2      	ldr	r2, [r2, #12]
 8001dae:	0a12      	lsrs	r2, r2, #8
 8001db0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001db4:	fb02 f303 	mul.w	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    break;
 8001dba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0e5b      	lsrs	r3, r3, #25
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001dd6:	687b      	ldr	r3, [r7, #4]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40021000 	.word	0x40021000
 8001de8:	016e3600 	.word	0x016e3600
 8001dec:	00f42400 	.word	0x00f42400

08001df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8098 	beq.w	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b43      	ldr	r3, [pc, #268]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10d      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b40      	ldr	r3, [pc, #256]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	4a3f      	ldr	r2, [pc, #252]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e36:	2301      	movs	r3, #1
 8001e38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a39      	ldr	r2, [pc, #228]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e46:	f7fe fe5f 	bl	8000b08 <HAL_GetTick>
 8001e4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4e:	f7fe fe5b 	bl	8000b08 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d902      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	74fb      	strb	r3, [r7, #19]
        break;
 8001e60:	e005      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e62:	4b30      	ldr	r3, [pc, #192]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0ef      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e6e:	7cfb      	ldrb	r3, [r7, #19]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d159      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e74:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01e      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d019      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e90:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e9c:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eac:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ebc:	4a18      	ldr	r2, [pc, #96]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d016      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7fe fe1b 	bl	8000b08 <HAL_GetTick>
 8001ed2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	e00b      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe fe17 	bl	8000b08 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d902      	bls.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	74fb      	strb	r3, [r7, #19]
            break;
 8001eec:	e006      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ec      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f10:	4903      	ldr	r1, [pc, #12]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f18:	e008      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	74bb      	strb	r3, [r7, #18]
 8001f1e:	e005      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f2c:	7c7b      	ldrb	r3, [r7, #17]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4ba7      	ldr	r3, [pc, #668]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	4aa6      	ldr	r2, [pc, #664]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f4a:	4ba1      	ldr	r3, [pc, #644]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f50:	f023 0203 	bic.w	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	499d      	ldr	r1, [pc, #628]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f6c:	4b98      	ldr	r3, [pc, #608]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f72:	f023 020c 	bic.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4995      	ldr	r1, [pc, #596]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f8e:	4b90      	ldr	r3, [pc, #576]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	498c      	ldr	r1, [pc, #560]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fb0:	4b87      	ldr	r3, [pc, #540]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4984      	ldr	r1, [pc, #528]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	497b      	ldr	r1, [pc, #492]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ff4:	4b76      	ldr	r3, [pc, #472]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	4973      	ldr	r1, [pc, #460]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002016:	4b6e      	ldr	r3, [pc, #440]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	496a      	ldr	r1, [pc, #424]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002038:	4b65      	ldr	r3, [pc, #404]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4962      	ldr	r1, [pc, #392]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800205a:	4b5d      	ldr	r3, [pc, #372]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002060:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	4959      	ldr	r1, [pc, #356]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800207c:	4b54      	ldr	r3, [pc, #336]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	4951      	ldr	r1, [pc, #324]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	4948      	ldr	r1, [pc, #288]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020c0:	4b43      	ldr	r3, [pc, #268]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4940      	ldr	r1, [pc, #256]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a3a      	ldr	r2, [pc, #232]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020f8:	4b35      	ldr	r3, [pc, #212]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002106:	4932      	ldr	r1, [pc, #200]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a2c      	ldr	r2, [pc, #176]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002122:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002130:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	4924      	ldr	r1, [pc, #144]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002176:	4916      	ldr	r1, [pc, #88]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002182:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002186:	d105      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a10      	ldr	r2, [pc, #64]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002192:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d019      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021a0:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4908      	ldr	r1, [pc, #32]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021be:	d109      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a02      	ldr	r2, [pc, #8]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ca:	60d3      	str	r3, [r2, #12]
 80021cc:	e002      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d015      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021e0:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	4926      	ldr	r1, [pc, #152]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021fe:	d105      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a20      	ldr	r2, [pc, #128]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d015      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002226:	4918      	ldr	r1, [pc, #96]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002236:	d105      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002238:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002242:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d015      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002252:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002256:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	490a      	ldr	r1, [pc, #40]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800226e:	d105      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800227a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800227c:	7cbb      	ldrb	r3, [r7, #18]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e049      	b.n	8002332 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f841 	bl	800233a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f000 fa30 	bl	8002730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d001      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e054      	b.n	8002412 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a26      	ldr	r2, [pc, #152]	@ (8002420 <HAL_TIM_Base_Start_IT+0xd0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d022      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002392:	d01d      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	@ (8002424 <HAL_TIM_Base_Start_IT+0xd4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d018      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <HAL_TIM_Base_Start_IT+0xd8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	@ (800242c <HAL_TIM_Base_Start_IT+0xdc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002430 <HAL_TIM_Base_Start_IT+0xe0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002434 <HAL_TIM_Base_Start_IT+0xe4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <HAL_TIM_Base_Start_IT+0xe8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d115      	bne.n	80023fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_TIM_Base_Start_IT+0xec>)
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d015      	beq.n	800240e <HAL_TIM_Base_Start_IT+0xbe>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e8:	d011      	beq.n	800240e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fa:	e008      	b.n	800240e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e000      	b.n	8002410 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800
 800242c:	40000c00 	.word	0x40000c00
 8002430:	40013400 	.word	0x40013400
 8002434:	40014000 	.word	0x40014000
 8002438:	40015000 	.word	0x40015000
 800243c:	00010007 	.word	0x00010007

08002440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d020      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0202 	mvn.w	r2, #2
 8002474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f931 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f923 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f934 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d020      	beq.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0204 	mvn.w	r2, #4
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f90b 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8fd 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f90e 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d020      	beq.n	800253c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0208 	mvn.w	r2, #8
 800250c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2204      	movs	r2, #4
 8002512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8e5 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f8d7 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8e8 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d020      	beq.n	8002588 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01b      	beq.n	8002588 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0210 	mvn.w	r2, #16
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2208      	movs	r2, #8
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8bf 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8b1 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f8c2 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0201 	mvn.w	r2, #1
 80025a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe f90a 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00c      	beq.n	80025da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f969 	bl	80028ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00c      	beq.n	80025fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80025f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f961 	bl	80028c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00c      	beq.n	8002622 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800261a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f87c 	bl	800271a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f06f 0220 	mvn.w	r2, #32
 800263e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f929 	bl	8002898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00c      	beq.n	800266a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f935 	bl	80028d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00c      	beq.n	800268e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f92d 	bl	80028e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80026aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f925 	bl	80028fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00c      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80026ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f91d 	bl	8002910 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a4c      	ldr	r2, [pc, #304]	@ (8002874 <TIM_Base_SetConfig+0x144>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d017      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274e:	d013      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a49      	ldr	r2, [pc, #292]	@ (8002878 <TIM_Base_SetConfig+0x148>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00f      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a48      	ldr	r2, [pc, #288]	@ (800287c <TIM_Base_SetConfig+0x14c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00b      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a47      	ldr	r2, [pc, #284]	@ (8002880 <TIM_Base_SetConfig+0x150>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a46      	ldr	r2, [pc, #280]	@ (8002884 <TIM_Base_SetConfig+0x154>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a45      	ldr	r2, [pc, #276]	@ (8002888 <TIM_Base_SetConfig+0x158>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800277e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a39      	ldr	r2, [pc, #228]	@ (8002874 <TIM_Base_SetConfig+0x144>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d023      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002798:	d01f      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a36      	ldr	r2, [pc, #216]	@ (8002878 <TIM_Base_SetConfig+0x148>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01b      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a35      	ldr	r2, [pc, #212]	@ (800287c <TIM_Base_SetConfig+0x14c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d017      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a34      	ldr	r2, [pc, #208]	@ (8002880 <TIM_Base_SetConfig+0x150>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a33      	ldr	r2, [pc, #204]	@ (8002884 <TIM_Base_SetConfig+0x154>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00f      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a33      	ldr	r2, [pc, #204]	@ (800288c <TIM_Base_SetConfig+0x15c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00b      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a32      	ldr	r2, [pc, #200]	@ (8002890 <TIM_Base_SetConfig+0x160>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a31      	ldr	r2, [pc, #196]	@ (8002894 <TIM_Base_SetConfig+0x164>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d003      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002888 <TIM_Base_SetConfig+0x158>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d108      	bne.n	80027ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <TIM_Base_SetConfig+0x144>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a1a      	ldr	r2, [pc, #104]	@ (8002884 <TIM_Base_SetConfig+0x154>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00f      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <TIM_Base_SetConfig+0x15c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00b      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a19      	ldr	r2, [pc, #100]	@ (8002890 <TIM_Base_SetConfig+0x160>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d007      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a18      	ldr	r2, [pc, #96]	@ (8002894 <TIM_Base_SetConfig+0x164>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d003      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <TIM_Base_SetConfig+0x158>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d103      	bne.n	8002848 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]
  }
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40000400 	.word	0x40000400
 800287c:	40000800 	.word	0x40000800
 8002880:	40000c00 	.word	0x40000c00
 8002884:	40013400 	.word	0x40013400
 8002888:	40015000 	.word	0x40015000
 800288c:	40014000 	.word	0x40014000
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800

08002898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e042      	b.n	80029bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7fd ff7b 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2224      	movs	r2, #36	@ 0x24
 8002952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fed2 	bl	8003718 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fbd3 	bl	8003120 <UART_SetConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e01b      	b.n	80029bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 ff51 	bl	800385c <UART_CheckIdleState>
 80029ba:	4603      	mov	r3, r0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	@ 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d137      	bne.n	8002a4c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_UART_Receive_IT+0x24>
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e030      	b.n	8002a4e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a18      	ldr	r2, [pc, #96]	@ (8002a58 <HAL_UART_Receive_IT+0x94>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d01f      	beq.n	8002a3c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	613b      	str	r3, [r7, #16]
   return(result);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	623b      	str	r3, [r7, #32]
 8002a2a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	69f9      	ldr	r1, [r7, #28]
 8002a2e:	6a3a      	ldr	r2, [r7, #32]
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e6      	bne.n	8002a0a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f001 f822 	bl	8003a8c <UART_Start_Receive_IT>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	e000      	b.n	8002a4e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3728      	adds	r7, #40	@ 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40008000 	.word	0x40008000

08002a5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0ba      	sub	sp, #232	@ 0xe8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002a86:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002a90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11b      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d015      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8300 	beq.w	80030c6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
      }
      return;
 8002ace:	e2fa      	b.n	80030c6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8123 	beq.w	8002d20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ada:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002ade:	4b8d      	ldr	r3, [pc, #564]	@ (8002d14 <HAL_UART_IRQHandler+0x2b8>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002aea:	4b8b      	ldr	r3, [pc, #556]	@ (8002d18 <HAL_UART_IRQHandler+0x2bc>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8116 	beq.w	8002d20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d011      	beq.n	8002b24 <HAL_UART_IRQHandler+0xc8>
 8002b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d011      	beq.n	8002b54 <HAL_UART_IRQHandler+0xf8>
 8002b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2202      	movs	r2, #2
 8002b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d011      	beq.n	8002b84 <HAL_UART_IRQHandler+0x128>
 8002b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2204      	movs	r2, #4
 8002b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	f043 0202 	orr.w	r2, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d017      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002ba0:	4b5c      	ldr	r3, [pc, #368]	@ (8002d14 <HAL_UART_IRQHandler+0x2b8>)
 8002ba2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2208      	movs	r2, #8
 8002bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	f043 0208 	orr.w	r2, r3, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x196>
 8002bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8266 	beq.w	80030ca <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d013      	beq.n	8002c32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c46:	2b40      	cmp	r3, #64	@ 0x40
 8002c48:	d005      	beq.n	8002c56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d054      	beq.n	8002d00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f001 f83a 	bl	8003cd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c66:	2b40      	cmp	r3, #64	@ 0x40
 8002c68:	d146      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3308      	adds	r3, #8
 8002c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1d9      	bne.n	8002c6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d017      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc6:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <HAL_UART_IRQHandler+0x2c0>)
 8002cc8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f85e 	bl	8000d92 <HAL_DMA_Abort_IT>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d019      	beq.n	8002d10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002cea:	4610      	mov	r0, r2
 8002cec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cee:	e00f      	b.n	8002d10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f9ff 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf6:	e00b      	b.n	8002d10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f9fb 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfe:	e007      	b.n	8002d10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f9f7 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002d0e:	e1dc      	b.n	80030ca <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	bf00      	nop
    return;
 8002d12:	e1da      	b.n	80030ca <HAL_UART_IRQHandler+0x66e>
 8002d14:	10000001 	.word	0x10000001
 8002d18:	04000120 	.word	0x04000120
 8002d1c:	08003d9d 	.word	0x08003d9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 8170 	bne.w	800300a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8169 	beq.w	800300a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8162 	beq.w	800300a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d58:	2b40      	cmp	r3, #64	@ 0x40
 8002d5a:	f040 80d8 	bne.w	8002f0e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80af 	beq.w	8002ed4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f080 80a7 	bcs.w	8002ed4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8087 	bne.w	8002eb2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dd2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1da      	bne.n	8002da4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3308      	adds	r3, #8
 8002df4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e1      	bne.n	8002dee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3308      	adds	r3, #8
 8002e30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3308      	adds	r3, #8
 8002e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e3      	bne.n	8002e2a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e80:	f023 0310 	bic.w	r3, r3, #16
 8002e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e4      	bne.n	8002e70 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd ff17 	bl	8000ce0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f91b 	bl	8003108 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002ed2:	e0fc      	b.n	80030ce <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	f040 80f5 	bne.w	80030ce <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	f040 80eb 	bne.w	80030ce <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8fe 	bl	8003108 <HAL_UARTEx_RxEventCallback>
      return;
 8002f0c:	e0df      	b.n	80030ce <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80d1 	beq.w	80030d2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80cc 	beq.w	80030d2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e4      	bne.n	8002f3a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3308      	adds	r3, #8
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3308      	adds	r3, #8
 8002f94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f98:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fa0:	e841 2300 	strex	r3, r2, [r1]
 8002fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e1      	bne.n	8002f70 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f023 0310 	bic.w	r3, r3, #16
 8002fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	617b      	str	r3, [r7, #20]
   return(result);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e4      	bne.n	8002fc0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f880 	bl	8003108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003008:	e063      	b.n	80030d2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800300a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800300e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00e      	beq.n	8003034 <HAL_UART_IRQHandler+0x5d8>
 8003016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800301a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800302a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f001 fc13 	bl	8004858 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003032:	e051      	b.n	80030d8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303c:	2b00      	cmp	r3, #0
 800303e:	d014      	beq.n	800306a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800304c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800305c:	2b00      	cmp	r3, #0
 800305e:	d03a      	beq.n	80030d6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
    }
    return;
 8003068:	e035      	b.n	80030d6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800306a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800306e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_UART_IRQHandler+0x62e>
 8003076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800307a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fe9c 	bl	8003dc0 <UART_EndTransmit_IT>
    return;
 8003088:	e026      	b.n	80030d8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800308a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800308e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_UART_IRQHandler+0x64e>
 8003096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800309a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f001 fbec 	bl	8004880 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a8:	e016      	b.n	80030d8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d010      	beq.n	80030d8 <HAL_UART_IRQHandler+0x67c>
 80030b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da0c      	bge.n	80030d8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f001 fbd4 	bl	800486c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030c4:	e008      	b.n	80030d8 <HAL_UART_IRQHandler+0x67c>
      return;
 80030c6:	bf00      	nop
 80030c8:	e006      	b.n	80030d8 <HAL_UART_IRQHandler+0x67c>
    return;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <HAL_UART_IRQHandler+0x67c>
      return;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <HAL_UART_IRQHandler+0x67c>
      return;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <HAL_UART_IRQHandler+0x67c>
    return;
 80030d6:	bf00      	nop
  }
}
 80030d8:	37e8      	adds	r7, #232	@ 0xe8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop

080030e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003124:	b08c      	sub	sp, #48	@ 0x30
 8003126:	af00      	add	r7, sp, #0
 8003128:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	431a      	orrs	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	431a      	orrs	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4313      	orrs	r3, r2
 8003146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4baa      	ldr	r3, [pc, #680]	@ (80033f8 <UART_SetConfig+0x2d8>)
 8003150:	4013      	ands	r3, r2
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003158:	430b      	orrs	r3, r1
 800315a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a9f      	ldr	r2, [pc, #636]	@ (80033fc <UART_SetConfig+0x2dc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003188:	4313      	orrs	r3, r2
 800318a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003196:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	f023 010f 	bic.w	r1, r3, #15
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a90      	ldr	r2, [pc, #576]	@ (8003400 <UART_SetConfig+0x2e0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d125      	bne.n	8003210 <UART_SetConfig+0xf0>
 80031c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003404 <UART_SetConfig+0x2e4>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d81a      	bhi.n	8003208 <UART_SetConfig+0xe8>
 80031d2:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <UART_SetConfig+0xb8>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031f9 	.word	0x080031f9
 80031e0:	080031f1 	.word	0x080031f1
 80031e4:	08003201 	.word	0x08003201
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ee:	e116      	b.n	800341e <UART_SetConfig+0x2fe>
 80031f0:	2302      	movs	r3, #2
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f6:	e112      	b.n	800341e <UART_SetConfig+0x2fe>
 80031f8:	2304      	movs	r3, #4
 80031fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031fe:	e10e      	b.n	800341e <UART_SetConfig+0x2fe>
 8003200:	2308      	movs	r3, #8
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003206:	e10a      	b.n	800341e <UART_SetConfig+0x2fe>
 8003208:	2310      	movs	r3, #16
 800320a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800320e:	e106      	b.n	800341e <UART_SetConfig+0x2fe>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a7c      	ldr	r2, [pc, #496]	@ (8003408 <UART_SetConfig+0x2e8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d138      	bne.n	800328c <UART_SetConfig+0x16c>
 800321a:	4b7a      	ldr	r3, [pc, #488]	@ (8003404 <UART_SetConfig+0x2e4>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d82d      	bhi.n	8003284 <UART_SetConfig+0x164>
 8003228:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <UART_SetConfig+0x110>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003265 	.word	0x08003265
 8003234:	08003285 	.word	0x08003285
 8003238:	08003285 	.word	0x08003285
 800323c:	08003285 	.word	0x08003285
 8003240:	08003275 	.word	0x08003275
 8003244:	08003285 	.word	0x08003285
 8003248:	08003285 	.word	0x08003285
 800324c:	08003285 	.word	0x08003285
 8003250:	0800326d 	.word	0x0800326d
 8003254:	08003285 	.word	0x08003285
 8003258:	08003285 	.word	0x08003285
 800325c:	08003285 	.word	0x08003285
 8003260:	0800327d 	.word	0x0800327d
 8003264:	2300      	movs	r3, #0
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800326a:	e0d8      	b.n	800341e <UART_SetConfig+0x2fe>
 800326c:	2302      	movs	r3, #2
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003272:	e0d4      	b.n	800341e <UART_SetConfig+0x2fe>
 8003274:	2304      	movs	r3, #4
 8003276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800327a:	e0d0      	b.n	800341e <UART_SetConfig+0x2fe>
 800327c:	2308      	movs	r3, #8
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003282:	e0cc      	b.n	800341e <UART_SetConfig+0x2fe>
 8003284:	2310      	movs	r3, #16
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800328a:	e0c8      	b.n	800341e <UART_SetConfig+0x2fe>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a5e      	ldr	r2, [pc, #376]	@ (800340c <UART_SetConfig+0x2ec>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d125      	bne.n	80032e2 <UART_SetConfig+0x1c2>
 8003296:	4b5b      	ldr	r3, [pc, #364]	@ (8003404 <UART_SetConfig+0x2e4>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032a0:	2b30      	cmp	r3, #48	@ 0x30
 80032a2:	d016      	beq.n	80032d2 <UART_SetConfig+0x1b2>
 80032a4:	2b30      	cmp	r3, #48	@ 0x30
 80032a6:	d818      	bhi.n	80032da <UART_SetConfig+0x1ba>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d00a      	beq.n	80032c2 <UART_SetConfig+0x1a2>
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d814      	bhi.n	80032da <UART_SetConfig+0x1ba>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <UART_SetConfig+0x19a>
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d008      	beq.n	80032ca <UART_SetConfig+0x1aa>
 80032b8:	e00f      	b.n	80032da <UART_SetConfig+0x1ba>
 80032ba:	2300      	movs	r3, #0
 80032bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032c0:	e0ad      	b.n	800341e <UART_SetConfig+0x2fe>
 80032c2:	2302      	movs	r3, #2
 80032c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032c8:	e0a9      	b.n	800341e <UART_SetConfig+0x2fe>
 80032ca:	2304      	movs	r3, #4
 80032cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d0:	e0a5      	b.n	800341e <UART_SetConfig+0x2fe>
 80032d2:	2308      	movs	r3, #8
 80032d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d8:	e0a1      	b.n	800341e <UART_SetConfig+0x2fe>
 80032da:	2310      	movs	r3, #16
 80032dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e0:	e09d      	b.n	800341e <UART_SetConfig+0x2fe>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003410 <UART_SetConfig+0x2f0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d125      	bne.n	8003338 <UART_SetConfig+0x218>
 80032ec:	4b45      	ldr	r3, [pc, #276]	@ (8003404 <UART_SetConfig+0x2e4>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80032f8:	d016      	beq.n	8003328 <UART_SetConfig+0x208>
 80032fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80032fc:	d818      	bhi.n	8003330 <UART_SetConfig+0x210>
 80032fe:	2b80      	cmp	r3, #128	@ 0x80
 8003300:	d00a      	beq.n	8003318 <UART_SetConfig+0x1f8>
 8003302:	2b80      	cmp	r3, #128	@ 0x80
 8003304:	d814      	bhi.n	8003330 <UART_SetConfig+0x210>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <UART_SetConfig+0x1f0>
 800330a:	2b40      	cmp	r3, #64	@ 0x40
 800330c:	d008      	beq.n	8003320 <UART_SetConfig+0x200>
 800330e:	e00f      	b.n	8003330 <UART_SetConfig+0x210>
 8003310:	2300      	movs	r3, #0
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003316:	e082      	b.n	800341e <UART_SetConfig+0x2fe>
 8003318:	2302      	movs	r3, #2
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800331e:	e07e      	b.n	800341e <UART_SetConfig+0x2fe>
 8003320:	2304      	movs	r3, #4
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003326:	e07a      	b.n	800341e <UART_SetConfig+0x2fe>
 8003328:	2308      	movs	r3, #8
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800332e:	e076      	b.n	800341e <UART_SetConfig+0x2fe>
 8003330:	2310      	movs	r3, #16
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003336:	e072      	b.n	800341e <UART_SetConfig+0x2fe>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a35      	ldr	r2, [pc, #212]	@ (8003414 <UART_SetConfig+0x2f4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d12a      	bne.n	8003398 <UART_SetConfig+0x278>
 8003342:	4b30      	ldr	r3, [pc, #192]	@ (8003404 <UART_SetConfig+0x2e4>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003348:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003350:	d01a      	beq.n	8003388 <UART_SetConfig+0x268>
 8003352:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003356:	d81b      	bhi.n	8003390 <UART_SetConfig+0x270>
 8003358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800335c:	d00c      	beq.n	8003378 <UART_SetConfig+0x258>
 800335e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003362:	d815      	bhi.n	8003390 <UART_SetConfig+0x270>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <UART_SetConfig+0x250>
 8003368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800336c:	d008      	beq.n	8003380 <UART_SetConfig+0x260>
 800336e:	e00f      	b.n	8003390 <UART_SetConfig+0x270>
 8003370:	2300      	movs	r3, #0
 8003372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003376:	e052      	b.n	800341e <UART_SetConfig+0x2fe>
 8003378:	2302      	movs	r3, #2
 800337a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800337e:	e04e      	b.n	800341e <UART_SetConfig+0x2fe>
 8003380:	2304      	movs	r3, #4
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003386:	e04a      	b.n	800341e <UART_SetConfig+0x2fe>
 8003388:	2308      	movs	r3, #8
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800338e:	e046      	b.n	800341e <UART_SetConfig+0x2fe>
 8003390:	2310      	movs	r3, #16
 8003392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003396:	e042      	b.n	800341e <UART_SetConfig+0x2fe>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <UART_SetConfig+0x2dc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d13a      	bne.n	8003418 <UART_SetConfig+0x2f8>
 80033a2:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <UART_SetConfig+0x2e4>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033b0:	d01a      	beq.n	80033e8 <UART_SetConfig+0x2c8>
 80033b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033b6:	d81b      	bhi.n	80033f0 <UART_SetConfig+0x2d0>
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033bc:	d00c      	beq.n	80033d8 <UART_SetConfig+0x2b8>
 80033be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c2:	d815      	bhi.n	80033f0 <UART_SetConfig+0x2d0>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <UART_SetConfig+0x2b0>
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033cc:	d008      	beq.n	80033e0 <UART_SetConfig+0x2c0>
 80033ce:	e00f      	b.n	80033f0 <UART_SetConfig+0x2d0>
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033d6:	e022      	b.n	800341e <UART_SetConfig+0x2fe>
 80033d8:	2302      	movs	r3, #2
 80033da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033de:	e01e      	b.n	800341e <UART_SetConfig+0x2fe>
 80033e0:	2304      	movs	r3, #4
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033e6:	e01a      	b.n	800341e <UART_SetConfig+0x2fe>
 80033e8:	2308      	movs	r3, #8
 80033ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ee:	e016      	b.n	800341e <UART_SetConfig+0x2fe>
 80033f0:	2310      	movs	r3, #16
 80033f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033f6:	e012      	b.n	800341e <UART_SetConfig+0x2fe>
 80033f8:	cfff69f3 	.word	0xcfff69f3
 80033fc:	40008000 	.word	0x40008000
 8003400:	40013800 	.word	0x40013800
 8003404:	40021000 	.word	0x40021000
 8003408:	40004400 	.word	0x40004400
 800340c:	40004800 	.word	0x40004800
 8003410:	40004c00 	.word	0x40004c00
 8003414:	40005000 	.word	0x40005000
 8003418:	2310      	movs	r3, #16
 800341a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4aae      	ldr	r2, [pc, #696]	@ (80036dc <UART_SetConfig+0x5bc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	f040 8097 	bne.w	8003558 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800342a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800342e:	2b08      	cmp	r3, #8
 8003430:	d823      	bhi.n	800347a <UART_SetConfig+0x35a>
 8003432:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <UART_SetConfig+0x318>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	0800345d 	.word	0x0800345d
 800343c:	0800347b 	.word	0x0800347b
 8003440:	08003465 	.word	0x08003465
 8003444:	0800347b 	.word	0x0800347b
 8003448:	0800346b 	.word	0x0800346b
 800344c:	0800347b 	.word	0x0800347b
 8003450:	0800347b 	.word	0x0800347b
 8003454:	0800347b 	.word	0x0800347b
 8003458:	08003473 	.word	0x08003473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345c:	f7fe fc24 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8003460:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003462:	e010      	b.n	8003486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003464:	4b9e      	ldr	r3, [pc, #632]	@ (80036e0 <UART_SetConfig+0x5c0>)
 8003466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003468:	e00d      	b.n	8003486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346a:	f7fe fbaf 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 800346e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003470:	e009      	b.n	8003486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003478:	e005      	b.n	8003486 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003484:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8130 	beq.w	80036ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	4a94      	ldr	r2, [pc, #592]	@ (80036e4 <UART_SetConfig+0x5c4>)
 8003494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003498:	461a      	mov	r2, r3
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	fbb3 f3f2 	udiv	r3, r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d305      	bcc.n	80034be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d903      	bls.n	80034c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034c4:	e113      	b.n	80036ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	2200      	movs	r2, #0
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	60fa      	str	r2, [r7, #12]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	4a84      	ldr	r2, [pc, #528]	@ (80036e4 <UART_SetConfig+0x5c4>)
 80034d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2200      	movs	r2, #0
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034e8:	f7fc fe9a 	bl	8000220 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	020b      	lsls	r3, r1, #8
 80034fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003502:	0202      	lsls	r2, r0, #8
 8003504:	6979      	ldr	r1, [r7, #20]
 8003506:	6849      	ldr	r1, [r1, #4]
 8003508:	0849      	lsrs	r1, r1, #1
 800350a:	2000      	movs	r0, #0
 800350c:	460c      	mov	r4, r1
 800350e:	4605      	mov	r5, r0
 8003510:	eb12 0804 	adds.w	r8, r2, r4
 8003514:	eb43 0905 	adc.w	r9, r3, r5
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	469a      	mov	sl, r3
 8003520:	4693      	mov	fp, r2
 8003522:	4652      	mov	r2, sl
 8003524:	465b      	mov	r3, fp
 8003526:	4640      	mov	r0, r8
 8003528:	4649      	mov	r1, r9
 800352a:	f7fc fe79 	bl	8000220 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4613      	mov	r3, r2
 8003534:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800353c:	d308      	bcc.n	8003550 <UART_SetConfig+0x430>
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003544:	d204      	bcs.n	8003550 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a3a      	ldr	r2, [r7, #32]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	e0ce      	b.n	80036ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003556:	e0ca      	b.n	80036ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003560:	d166      	bne.n	8003630 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003562:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003566:	2b08      	cmp	r3, #8
 8003568:	d827      	bhi.n	80035ba <UART_SetConfig+0x49a>
 800356a:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <UART_SetConfig+0x450>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	08003595 	.word	0x08003595
 8003574:	0800359d 	.word	0x0800359d
 8003578:	080035a5 	.word	0x080035a5
 800357c:	080035bb 	.word	0x080035bb
 8003580:	080035ab 	.word	0x080035ab
 8003584:	080035bb 	.word	0x080035bb
 8003588:	080035bb 	.word	0x080035bb
 800358c:	080035bb 	.word	0x080035bb
 8003590:	080035b3 	.word	0x080035b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003594:	f7fe fb88 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8003598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800359a:	e014      	b.n	80035c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800359c:	f7fe fb9a 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 80035a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035a2:	e010      	b.n	80035c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a4:	4b4e      	ldr	r3, [pc, #312]	@ (80036e0 <UART_SetConfig+0x5c0>)
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035a8:	e00d      	b.n	80035c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035aa:	f7fe fb0f 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 80035ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035b0:	e009      	b.n	80035c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035b8:	e005      	b.n	80035c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8090 	beq.w	80036ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	4a44      	ldr	r2, [pc, #272]	@ (80036e4 <UART_SetConfig+0x5c4>)
 80035d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035d8:	461a      	mov	r2, r3
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80035e0:	005a      	lsls	r2, r3, #1
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	441a      	add	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d916      	bls.n	8003628 <UART_SetConfig+0x508>
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003600:	d212      	bcs.n	8003628 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f023 030f 	bic.w	r3, r3, #15
 800360a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	b29b      	uxth	r3, r3
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	b29a      	uxth	r2, r3
 8003618:	8bfb      	ldrh	r3, [r7, #30]
 800361a:	4313      	orrs	r3, r2
 800361c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	8bfa      	ldrh	r2, [r7, #30]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	e062      	b.n	80036ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800362e:	e05e      	b.n	80036ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003630:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003634:	2b08      	cmp	r3, #8
 8003636:	d828      	bhi.n	800368a <UART_SetConfig+0x56a>
 8003638:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <UART_SetConfig+0x520>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003665 	.word	0x08003665
 8003644:	0800366d 	.word	0x0800366d
 8003648:	08003675 	.word	0x08003675
 800364c:	0800368b 	.word	0x0800368b
 8003650:	0800367b 	.word	0x0800367b
 8003654:	0800368b 	.word	0x0800368b
 8003658:	0800368b 	.word	0x0800368b
 800365c:	0800368b 	.word	0x0800368b
 8003660:	08003683 	.word	0x08003683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003664:	f7fe fb20 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8003668:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800366a:	e014      	b.n	8003696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800366c:	f7fe fb32 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 8003670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003672:	e010      	b.n	8003696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003674:	4b1a      	ldr	r3, [pc, #104]	@ (80036e0 <UART_SetConfig+0x5c0>)
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003678:	e00d      	b.n	8003696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367a:	f7fe faa7 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 800367e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003680:	e009      	b.n	8003696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003688:	e005      	b.n	8003696 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003694:	bf00      	nop
    }

    if (pclk != 0U)
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d028      	beq.n	80036ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	4a10      	ldr	r2, [pc, #64]	@ (80036e4 <UART_SetConfig+0x5c4>)
 80036a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036a6:	461a      	mov	r2, r3
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	441a      	add	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	d910      	bls.n	80036e8 <UART_SetConfig+0x5c8>
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036cc:	d20c      	bcs.n	80036e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60da      	str	r2, [r3, #12]
 80036d8:	e009      	b.n	80036ee <UART_SetConfig+0x5ce>
 80036da:	bf00      	nop
 80036dc:	40008000 	.word	0x40008000
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	08007a7c 	.word	0x08007a7c
      }
      else
      {
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2200      	movs	r2, #0
 8003708:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800370a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800370e:	4618      	mov	r0, r3
 8003710:	3730      	adds	r7, #48	@ 0x30
 8003712:	46bd      	mov	sp, r7
 8003714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01a      	beq.n	800382e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003816:	d10a      	bne.n	800382e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b098      	sub	sp, #96	@ 0x60
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800386c:	f7fd f94c 	bl	8000b08 <HAL_GetTick>
 8003870:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b08      	cmp	r3, #8
 800387e:	d12f      	bne.n	80038e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003880:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003888:	2200      	movs	r2, #0
 800388a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f88e 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d022      	beq.n	80038e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e6      	bne.n	800389a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e063      	b.n	80039a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d149      	bne.n	8003982 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f857 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d03c      	beq.n	8003982 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	623b      	str	r3, [r7, #32]
   return(result);
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800391c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003926:	633b      	str	r3, [r7, #48]	@ 0x30
 8003928:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800392c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e6      	bne.n	8003908 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3308      	adds	r3, #8
 8003940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	60fb      	str	r3, [r7, #12]
   return(result);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3308      	adds	r3, #8
 8003958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800395a:	61fa      	str	r2, [r7, #28]
 800395c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	69b9      	ldr	r1, [r7, #24]
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	617b      	str	r3, [r7, #20]
   return(result);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e5      	bne.n	800393a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e012      	b.n	80039a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3758      	adds	r7, #88	@ 0x58
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c0:	e04f      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039c8:	d04b      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fd f89d 	bl	8000b08 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e04e      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d037      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b80      	cmp	r3, #128	@ 0x80
 80039f6:	d034      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b40      	cmp	r3, #64	@ 0x40
 80039fc:	d031      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d110      	bne.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2208      	movs	r2, #8
 8003a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f95b 	bl	8003cd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e029      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a3c:	d111      	bne.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f941 	bl	8003cd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e00f      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d0a0      	beq.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b0a3      	sub	sp, #140	@ 0x8c
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003abe:	d10e      	bne.n	8003ade <UART_Start_Receive_IT+0x52>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <UART_Start_Receive_IT+0x48>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003ace:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ad2:	e02d      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	22ff      	movs	r2, #255	@ 0xff
 8003ad8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003adc:	e028      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <UART_Start_Receive_IT+0x76>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <UART_Start_Receive_IT+0x6c>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	22ff      	movs	r2, #255	@ 0xff
 8003af2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003af6:	e01b      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	227f      	movs	r2, #127	@ 0x7f
 8003afc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003b00:	e016      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b0a:	d10d      	bne.n	8003b28 <UART_Start_Receive_IT+0x9c>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d104      	bne.n	8003b1e <UART_Start_Receive_IT+0x92>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	227f      	movs	r2, #127	@ 0x7f
 8003b18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003b1c:	e008      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	223f      	movs	r2, #63	@ 0x3f
 8003b22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003b26:	e003      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	@ 0x22
 8003b3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3308      	adds	r3, #8
 8003b46:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003b50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3308      	adds	r3, #8
 8003b60:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003b64:	673a      	str	r2, [r7, #112]	@ 0x70
 8003b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003b6a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8003b72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e3      	bne.n	8003b40 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b80:	d14f      	bne.n	8003c22 <UART_Start_Receive_IT+0x196>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003b88:	88fa      	ldrh	r2, [r7, #6]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d349      	bcc.n	8003c22 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b96:	d107      	bne.n	8003ba8 <UART_Start_Receive_IT+0x11c>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a47      	ldr	r2, [pc, #284]	@ (8003cc0 <UART_Start_Receive_IT+0x234>)
 8003ba4:	675a      	str	r2, [r3, #116]	@ 0x74
 8003ba6:	e002      	b.n	8003bae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a46      	ldr	r2, [pc, #280]	@ (8003cc4 <UART_Start_Receive_IT+0x238>)
 8003bac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01a      	beq.n	8003bec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bda:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003bde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e4      	bne.n	8003bb6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c0c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003c0e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_Start_Receive_IT+0x160>
 8003c20:	e046      	b.n	8003cb0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c2a:	d107      	bne.n	8003c3c <UART_Start_Receive_IT+0x1b0>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <UART_Start_Receive_IT+0x23c>)
 8003c38:	675a      	str	r2, [r3, #116]	@ 0x74
 8003c3a:	e002      	b.n	8003c42 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a23      	ldr	r2, [pc, #140]	@ (8003ccc <UART_Start_Receive_IT+0x240>)
 8003c40:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d019      	beq.n	8003c7e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003c5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c6a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e6      	bne.n	8003c4a <UART_Start_Receive_IT+0x1be>
 8003c7c:	e018      	b.n	8003cb0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f043 0320 	orr.w	r3, r3, #32
 8003c92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	69f9      	ldr	r1, [r7, #28]
 8003ca2:	6a3a      	ldr	r2, [r7, #32]
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e6      	bne.n	8003c7e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	378c      	adds	r7, #140	@ 0x8c
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	080044ed 	.word	0x080044ed
 8003cc4:	08004189 	.word	0x08004189
 8003cc8:	08003fd1 	.word	0x08003fd1
 8003ccc:	08003e19 	.word	0x08003e19

08003cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b095      	sub	sp, #84	@ 0x54
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e6      	bne.n	8003cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e3      	bne.n	8003d0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d118      	bne.n	8003d7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6979      	ldr	r1, [r7, #20]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	613b      	str	r3, [r7, #16]
   return(result);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e6      	bne.n	8003d4a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d90:	bf00      	nop
 8003d92:	3754      	adds	r7, #84	@ 0x54
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f7ff f99e 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	613b      	str	r3, [r7, #16]
   return(result);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e6      	bne.n	8003dc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff f969 	bl	80030e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e0e:	bf00      	nop
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b09c      	sub	sp, #112	@ 0x70
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003e26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e30:	2b22      	cmp	r3, #34	@ 0x22
 8003e32:	f040 80be 	bne.w	8003fb2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003e44:	b2d9      	uxtb	r1, r3
 8003e46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	400a      	ands	r2, r1
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f040 80a1 	bne.w	8003fc2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ea0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ea4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e6      	bne.n	8003e80 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3308      	adds	r3, #8
 8003ed0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ed2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ed4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e5      	bne.n	8003eb2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a33      	ldr	r2, [pc, #204]	@ (8003fcc <UART_RxISR_8BIT+0x1b4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d01f      	beq.n	8003f44 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d018      	beq.n	8003f44 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f26:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e6      	bne.n	8003f12 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d12e      	bne.n	8003faa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0310 	bic.w	r3, r3, #16
 8003f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	69b9      	ldr	r1, [r7, #24]
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e6      	bne.n	8003f52 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d103      	bne.n	8003f9a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2210      	movs	r2, #16
 8003f98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff f8b0 	bl	8003108 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fa8:	e00b      	b.n	8003fc2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fc fbd2 	bl	8000754 <HAL_UART_RxCpltCallback>
}
 8003fb0:	e007      	b.n	8003fc2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0208 	orr.w	r2, r2, #8
 8003fc0:	619a      	str	r2, [r3, #24]
}
 8003fc2:	bf00      	nop
 8003fc4:	3770      	adds	r7, #112	@ 0x70
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40008000 	.word	0x40008000

08003fd0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b09c      	sub	sp, #112	@ 0x70
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003fde:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe8:	2b22      	cmp	r3, #34	@ 0x22
 8003fea:	f040 80be 	bne.w	800416a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ffe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004002:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004006:	4013      	ands	r3, r2
 8004008:	b29a      	uxth	r2, r3
 800400a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800400c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	1c9a      	adds	r2, r3, #2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 80a1 	bne.w	800417a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800404c:	667b      	str	r3, [r7, #100]	@ 0x64
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004056:	657b      	str	r3, [r7, #84]	@ 0x54
 8004058:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800405c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e6      	bne.n	8004038 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3308      	adds	r3, #8
 8004070:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	663b      	str	r3, [r7, #96]	@ 0x60
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800408a:	643a      	str	r2, [r7, #64]	@ 0x40
 800408c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004090:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a33      	ldr	r2, [pc, #204]	@ (8004184 <UART_RxISR_16BIT+0x1b4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d01f      	beq.n	80040fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d12e      	bne.n	8004162 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	60bb      	str	r3, [r7, #8]
   return(result);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f023 0310 	bic.w	r3, r3, #16
 800411e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6979      	ldr	r1, [r7, #20]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	613b      	str	r3, [r7, #16]
   return(result);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e6      	bne.n	800410a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b10      	cmp	r3, #16
 8004148:	d103      	bne.n	8004152 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2210      	movs	r2, #16
 8004150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fe ffd4 	bl	8003108 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004160:	e00b      	b.n	800417a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fc faf6 	bl	8000754 <HAL_UART_RxCpltCallback>
}
 8004168:	e007      	b.n	800417a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0208 	orr.w	r2, r2, #8
 8004178:	619a      	str	r2, [r3, #24]
}
 800417a:	bf00      	nop
 800417c:	3770      	adds	r7, #112	@ 0x70
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40008000 	.word	0x40008000

08004188 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b0ac      	sub	sp, #176	@ 0xb0
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004196:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041be:	2b22      	cmp	r3, #34	@ 0x22
 80041c0:	f040 8183 	bne.w	80044ca <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80041ca:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041ce:	e126      	b.n	800441e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80041de:	b2d9      	uxtb	r1, r3
 80041e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	400a      	ands	r2, r1
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	2b00      	cmp	r3, #0
 8004220:	d053      	beq.n	80042ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d011      	beq.n	8004252 <UART_RxISR_8BIT_FIFOEN+0xca>
 800422e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2201      	movs	r2, #1
 8004240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004248:	f043 0201 	orr.w	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d011      	beq.n	8004282 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800425e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2202      	movs	r2, #2
 8004270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004278:	f043 0204 	orr.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800428e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2204      	movs	r2, #4
 80042a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a8:	f043 0202 	orr.w	r2, r3, #2
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d006      	beq.n	80042ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7fe ff19 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f040 80a3 	bne.w	800441e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80042e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042fc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004300:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004308:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e4      	bne.n	80042d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3308      	adds	r3, #8
 8004314:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800431e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3308      	adds	r3, #8
 8004332:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004336:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004338:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800433c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004344:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e1      	bne.n	800430e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a60      	ldr	r2, [pc, #384]	@ (80044e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d021      	beq.n	80043ac <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01a      	beq.n	80043ac <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004386:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800438a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004398:	657b      	str	r3, [r7, #84]	@ 0x54
 800439a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800439e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80043a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e4      	bne.n	8004376 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d130      	bne.n	8004416 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	f023 0310 	bic.w	r3, r3, #16
 80043ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e4      	bne.n	80043ba <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d103      	bne.n	8004406 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fe fe7a 	bl	8003108 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004414:	e00e      	b.n	8004434 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fc f99c 	bl	8000754 <HAL_UART_RxCpltCallback>
        break;
 800441c:	e00a      	b.n	8004434 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800441e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004422:	2b00      	cmp	r3, #0
 8004424:	d006      	beq.n	8004434 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8004426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	f47f aece 	bne.w	80041d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800443a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800443e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004442:	2b00      	cmp	r3, #0
 8004444:	d049      	beq.n	80044da <UART_RxISR_8BIT_FIFOEN+0x352>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800444c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8004450:	429a      	cmp	r2, r3
 8004452:	d242      	bcs.n	80044da <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	61fb      	str	r3, [r7, #28]
   return(result);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800446a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3308      	adds	r3, #8
 8004474:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004478:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800447e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e3      	bne.n	8004454 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	@ (80044e8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004490:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f043 0320 	orr.w	r3, r3, #32
 80044a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6979      	ldr	r1, [r7, #20]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	613b      	str	r3, [r7, #16]
   return(result);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e4      	bne.n	8004492 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044c8:	e007      	b.n	80044da <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699a      	ldr	r2, [r3, #24]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0208 	orr.w	r2, r2, #8
 80044d8:	619a      	str	r2, [r3, #24]
}
 80044da:	bf00      	nop
 80044dc:	37b0      	adds	r7, #176	@ 0xb0
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40008000 	.word	0x40008000
 80044e8:	08003e19 	.word	0x08003e19

080044ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b0ae      	sub	sp, #184	@ 0xb8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80044fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004522:	2b22      	cmp	r3, #34	@ 0x22
 8004524:	f040 8187 	bne.w	8004836 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800452e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004532:	e12a      	b.n	800478a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004546:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800454a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800454e:	4013      	ands	r3, r2
 8004550:	b29a      	uxth	r2, r3
 8004552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004556:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455c:	1c9a      	adds	r2, r3, #2
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800457e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	2b00      	cmp	r3, #0
 8004588:	d053      	beq.n	8004632 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800458a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d011      	beq.n	80045ba <UART_RxISR_16BIT_FIFOEN+0xce>
 8004596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800459a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2201      	movs	r2, #1
 80045a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b0:	f043 0201 	orr.w	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d011      	beq.n	80045ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 80045c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2202      	movs	r2, #2
 80045d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e0:	f043 0204 	orr.w	r2, r3, #4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d011      	beq.n	800461a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80045f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2204      	movs	r2, #4
 8004608:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004610:	f043 0202 	orr.w	r2, r3, #2
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004620:	2b00      	cmp	r3, #0
 8004622:	d006      	beq.n	8004632 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fe fd65 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	f040 80a5 	bne.w	800478a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800464e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004654:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004662:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004666:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800466a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e2      	bne.n	8004640 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3308      	adds	r3, #8
 8004680:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800468a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800468c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3308      	adds	r3, #8
 800469e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80046a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e1      	bne.n	800467a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a60      	ldr	r2, [pc, #384]	@ (8004850 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d021      	beq.n	8004718 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01a      	beq.n	8004718 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004704:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004706:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800470a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e4      	bne.n	80046e2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d130      	bne.n	8004782 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004748:	647b      	str	r3, [r7, #68]	@ 0x44
 800474a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800474e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e4      	bne.n	8004726 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b10      	cmp	r3, #16
 8004768:	d103      	bne.n	8004772 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2210      	movs	r2, #16
 8004770:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fe fcc4 	bl	8003108 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004780:	e00e      	b.n	80047a0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fb ffe6 	bl	8000754 <HAL_UART_RxCpltCallback>
        break;
 8004788:	e00a      	b.n	80047a0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800478a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800478e:	2b00      	cmp	r3, #0
 8004790:	d006      	beq.n	80047a0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8004792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	f47f aeca 	bne.w	8004534 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80047a6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80047aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d049      	beq.n	8004846 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80047b8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80047bc:	429a      	cmp	r2, r3
 80047be:	d242      	bcs.n	8004846 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3308      	adds	r3, #8
 80047c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	623b      	str	r3, [r7, #32]
   return(result);
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3308      	adds	r3, #8
 80047e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80047e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80047e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e3      	bne.n	80047c0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a16      	ldr	r2, [pc, #88]	@ (8004854 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80047fc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	60fb      	str	r3, [r7, #12]
   return(result);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f043 0320 	orr.w	r3, r3, #32
 8004812:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	617b      	str	r3, [r7, #20]
   return(result);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e4      	bne.n	80047fe <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004834:	e007      	b.n	8004846 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699a      	ldr	r2, [r3, #24]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0208 	orr.w	r2, r2, #8
 8004844:	619a      	str	r2, [r3, #24]
}
 8004846:	bf00      	nop
 8004848:	37b8      	adds	r7, #184	@ 0xb8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40008000 	.word	0x40008000
 8004854:	08003fd1 	.word	0x08003fd1

08004858 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_UARTEx_DisableFifoMode+0x16>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e027      	b.n	80048fa <HAL_UARTEx_DisableFifoMode+0x66>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2224      	movs	r2, #36	@ 0x24
 80048b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80048d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800491a:	2302      	movs	r3, #2
 800491c:	e02d      	b.n	800497a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2224      	movs	r2, #36	@ 0x24
 800492a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f850 	bl	8004a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004996:	2302      	movs	r3, #2
 8004998:	e02d      	b.n	80049f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2224      	movs	r2, #36	@ 0x24
 80049a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f812 	bl	8004a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d108      	bne.n	8004a22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a20:	e031      	b.n	8004a86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a22:	2308      	movs	r3, #8
 8004a24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a26:	2308      	movs	r3, #8
 8004a28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	0e5b      	lsrs	r3, r3, #25
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	0f5b      	lsrs	r3, r3, #29
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a4a:	7bbb      	ldrb	r3, [r7, #14]
 8004a4c:	7b3a      	ldrb	r2, [r7, #12]
 8004a4e:	4911      	ldr	r1, [pc, #68]	@ (8004a94 <UARTEx_SetNbDataToProcess+0x94>)
 8004a50:	5c8a      	ldrb	r2, [r1, r2]
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a56:	7b3a      	ldrb	r2, [r7, #12]
 8004a58:	490f      	ldr	r1, [pc, #60]	@ (8004a98 <UARTEx_SetNbDataToProcess+0x98>)
 8004a5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	7b7a      	ldrb	r2, [r7, #13]
 8004a6c:	4909      	ldr	r1, [pc, #36]	@ (8004a94 <UARTEx_SetNbDataToProcess+0x94>)
 8004a6e:	5c8a      	ldrb	r2, [r1, r2]
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a74:	7b7a      	ldrb	r2, [r7, #13]
 8004a76:	4908      	ldr	r1, [pc, #32]	@ (8004a98 <UARTEx_SetNbDataToProcess+0x98>)
 8004a78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	08007a94 	.word	0x08007a94
 8004a98:	08007a9c 	.word	0x08007a9c

08004a9c <__NVIC_SetPriority>:
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	6039      	str	r1, [r7, #0]
 8004aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	db0a      	blt.n	8004ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	490c      	ldr	r1, [pc, #48]	@ (8004ae8 <__NVIC_SetPriority+0x4c>)
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	0112      	lsls	r2, r2, #4
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	440b      	add	r3, r1
 8004ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ac4:	e00a      	b.n	8004adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4908      	ldr	r1, [pc, #32]	@ (8004aec <__NVIC_SetPriority+0x50>)
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	3b04      	subs	r3, #4
 8004ad4:	0112      	lsls	r2, r2, #4
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	440b      	add	r3, r1
 8004ada:	761a      	strb	r2, [r3, #24]
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	e000e100 	.word	0xe000e100
 8004aec:	e000ed00 	.word	0xe000ed00

08004af0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004af4:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <SysTick_Handler+0x1c>)
 8004af6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004af8:	f001 feb6 	bl	8006868 <xTaskGetSchedulerState>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b02:	f002 fcb1 	bl	8007468 <xPortSysTickHandler>
  }
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	e000e010 	.word	0xe000e010

08004b10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b14:	2100      	movs	r1, #0
 8004b16:	f06f 0004 	mvn.w	r0, #4
 8004b1a:	f7ff ffbf 	bl	8004a9c <__NVIC_SetPriority>
#endif
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b2a:	f3ef 8305 	mrs	r3, IPSR
 8004b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b36:	f06f 0305 	mvn.w	r3, #5
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	e00c      	b.n	8004b58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <osKernelInitialize+0x44>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b46:	4b08      	ldr	r3, [pc, #32]	@ (8004b68 <osKernelInitialize+0x44>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	607b      	str	r3, [r7, #4]
 8004b50:	e002      	b.n	8004b58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b58:	687b      	ldr	r3, [r7, #4]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	2000011c 	.word	0x2000011c

08004b6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b72:	f3ef 8305 	mrs	r3, IPSR
 8004b76:	603b      	str	r3, [r7, #0]
  return(result);
 8004b78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b7e:	f06f 0305 	mvn.w	r3, #5
 8004b82:	607b      	str	r3, [r7, #4]
 8004b84:	e010      	b.n	8004ba8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b86:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <osKernelStart+0x48>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d109      	bne.n	8004ba2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b8e:	f7ff ffbf 	bl	8004b10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b92:	4b08      	ldr	r3, [pc, #32]	@ (8004bb4 <osKernelStart+0x48>)
 8004b94:	2202      	movs	r2, #2
 8004b96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b98:	f001 fa18 	bl	8005fcc <vTaskStartScheduler>
      stat = osOK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	e002      	b.n	8004ba8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ba8:	687b      	ldr	r3, [r7, #4]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	2000011c 	.word	0x2000011c

08004bb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08e      	sub	sp, #56	@ 0x38
 8004bbc:	af04      	add	r7, sp, #16
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bc8:	f3ef 8305 	mrs	r3, IPSR
 8004bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8004bce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d17e      	bne.n	8004cd2 <osThreadNew+0x11a>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d07b      	beq.n	8004cd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004bda:	2380      	movs	r3, #128	@ 0x80
 8004bdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004bde:	2318      	movs	r3, #24
 8004be0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d045      	beq.n	8004c7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <osThreadNew+0x48>
        name = attr->name;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <osThreadNew+0x6e>
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b38      	cmp	r3, #56	@ 0x38
 8004c18:	d805      	bhi.n	8004c26 <osThreadNew+0x6e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <osThreadNew+0x72>
        return (NULL);
 8004c26:	2300      	movs	r3, #0
 8004c28:	e054      	b.n	8004cd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00e      	beq.n	8004c60 <osThreadNew+0xa8>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b5b      	cmp	r3, #91	@ 0x5b
 8004c48:	d90a      	bls.n	8004c60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d006      	beq.n	8004c60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <osThreadNew+0xa8>
        mem = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	e010      	b.n	8004c82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10c      	bne.n	8004c82 <osThreadNew+0xca>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d108      	bne.n	8004c82 <osThreadNew+0xca>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <osThreadNew+0xca>
          mem = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e001      	b.n	8004c82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d110      	bne.n	8004caa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c90:	9202      	str	r2, [sp, #8]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6a3a      	ldr	r2, [r7, #32]
 8004c9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 ffee 	bl	8005c80 <xTaskCreateStatic>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	e013      	b.n	8004cd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d110      	bne.n	8004cd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	f107 0310 	add.w	r3, r7, #16
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f001 f83c 	bl	8005d40 <xTaskCreate>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d001      	beq.n	8004cd2 <osThreadNew+0x11a>
            hTask = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cd2:	693b      	ldr	r3, [r7, #16]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3728      	adds	r7, #40	@ 0x28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	@ 0x28
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cec:	f3ef 8305 	mrs	r3, IPSR
 8004cf0:	613b      	str	r3, [r7, #16]
  return(result);
 8004cf2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d15f      	bne.n	8004db8 <osMessageQueueNew+0xdc>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d05c      	beq.n	8004db8 <osMessageQueueNew+0xdc>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d059      	beq.n	8004db8 <osMessageQueueNew+0xdc>
    mem = -1;
 8004d04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d029      	beq.n	8004d64 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d012      	beq.n	8004d3e <osMessageQueueNew+0x62>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b4f      	cmp	r3, #79	@ 0x4f
 8004d1e:	d90e      	bls.n	8004d3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <osMessageQueueNew+0x62>
        mem = 1;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e014      	b.n	8004d68 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d110      	bne.n	8004d68 <osMessageQueueNew+0x8c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10c      	bne.n	8004d68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d108      	bne.n	8004d68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <osMessageQueueNew+0x8c>
          mem = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e001      	b.n	8004d68 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d10b      	bne.n	8004d86 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2100      	movs	r1, #0
 8004d78:	9100      	str	r1, [sp, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fa31 	bl	80051e4 <xQueueGenericCreateStatic>
 8004d82:	61f8      	str	r0, [r7, #28]
 8004d84:	e008      	b.n	8004d98 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 faa4 	bl	80052de <xQueueGenericCreate>
 8004d96:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00c      	beq.n	8004db8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <osMessageQueueNew+0xd0>
        name = attr->name;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e001      	b.n	8004db0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	69f8      	ldr	r0, [r7, #28]
 8004db4:	f000 ff06 	bl	8005bc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004db8:	69fb      	ldr	r3, [r7, #28]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ddc:	f3ef 8305 	mrs	r3, IPSR
 8004de0:	617b      	str	r3, [r7, #20]
  return(result);
 8004de2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d028      	beq.n	8004e3a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <osMessageQueuePut+0x36>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <osMessageQueuePut+0x36>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004dfa:	f06f 0303 	mvn.w	r3, #3
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	e038      	b.n	8004e74 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004e06:	f107 0210 	add.w	r2, r7, #16
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	69b8      	ldr	r0, [r7, #24]
 8004e10:	f000 fbc6 	bl	80055a0 <xQueueGenericSendFromISR>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d003      	beq.n	8004e22 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004e1a:	f06f 0302 	mvn.w	r3, #2
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e028      	b.n	8004e74 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d025      	beq.n	8004e74 <osMessageQueuePut+0xb0>
 8004e28:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <osMessageQueuePut+0xbc>)
 8004e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	e01c      	b.n	8004e74 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <osMessageQueuePut+0x82>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004e46:	f06f 0303 	mvn.w	r3, #3
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	e012      	b.n	8004e74 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004e4e:	2300      	movs	r3, #0
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	69b8      	ldr	r0, [r7, #24]
 8004e56:	f000 faa1 	bl	800539c <xQueueGenericSend>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d009      	beq.n	8004e74 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004e66:	f06f 0301 	mvn.w	r3, #1
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	e002      	b.n	8004e74 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004e6e:	f06f 0302 	mvn.w	r3, #2
 8004e72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004e74:	69fb      	ldr	r3, [r7, #28]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e9a:	f3ef 8305 	mrs	r3, IPSR
 8004e9e:	617b      	str	r3, [r7, #20]
  return(result);
 8004ea0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d028      	beq.n	8004ef8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <osMessageQueueGet+0x34>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <osMessageQueueGet+0x34>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004eb8:	f06f 0303 	mvn.w	r3, #3
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	e037      	b.n	8004f30 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ec4:	f107 0310 	add.w	r3, r7, #16
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	69b8      	ldr	r0, [r7, #24]
 8004ece:	f000 fce7 	bl	80058a0 <xQueueReceiveFromISR>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d003      	beq.n	8004ee0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004ed8:	f06f 0302 	mvn.w	r3, #2
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	e027      	b.n	8004f30 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d024      	beq.n	8004f30 <osMessageQueueGet+0xac>
 8004ee6:	4b15      	ldr	r3, [pc, #84]	@ (8004f3c <osMessageQueueGet+0xb8>)
 8004ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	e01b      	b.n	8004f30 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <osMessageQueueGet+0x80>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d103      	bne.n	8004f0c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004f04:	f06f 0303 	mvn.w	r3, #3
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	e011      	b.n	8004f30 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	69b8      	ldr	r0, [r7, #24]
 8004f12:	f000 fbe3 	bl	80056dc <xQueueReceive>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d009      	beq.n	8004f30 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004f22:	f06f 0301 	mvn.w	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	e002      	b.n	8004f30 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004f2a:	f06f 0302 	mvn.w	r3, #2
 8004f2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f30:	69fb      	ldr	r3, [r7, #28]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4a07      	ldr	r2, [pc, #28]	@ (8004f6c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4a06      	ldr	r2, [pc, #24]	@ (8004f70 <vApplicationGetIdleTaskMemory+0x30>)
 8004f56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2280      	movs	r2, #128	@ 0x80
 8004f5c:	601a      	str	r2, [r3, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000120 	.word	0x20000120
 8004f70:	2000017c 	.word	0x2000017c

08004f74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a07      	ldr	r2, [pc, #28]	@ (8004fa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4a06      	ldr	r2, [pc, #24]	@ (8004fa4 <vApplicationGetTimerTaskMemory+0x30>)
 8004f8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f92:	601a      	str	r2, [r3, #0]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	2000037c 	.word	0x2000037c
 8004fa4:	200003d8 	.word	0x200003d8

08004fa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f103 0208 	add.w	r2, r3, #8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f103 0208 	add.w	r2, r3, #8
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f103 0208 	add.w	r2, r3, #8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	601a      	str	r2, [r3, #0]
}
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005060:	d103      	bne.n	800506a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e00c      	b.n	8005084 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3308      	adds	r3, #8
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	e002      	b.n	8005078 <vListInsert+0x2e>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d2f6      	bcs.n	8005072 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	601a      	str	r2, [r3, #0]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6892      	ldr	r2, [r2, #8]
 80050d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6852      	ldr	r2, [r2, #4]
 80050dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d103      	bne.n	80050f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	1e5a      	subs	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	e7fd      	b.n	8005138 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800513c:	f002 f904 	bl	8007348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	441a      	add	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516c:	3b01      	subs	r3, #1
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	441a      	add	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	22ff      	movs	r2, #255	@ 0xff
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	22ff      	movs	r2, #255	@ 0xff
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d114      	bne.n	80051bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01a      	beq.n	80051d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3310      	adds	r3, #16
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 f9a2 	bl	80064e8 <xTaskRemoveFromEventList>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d012      	beq.n	80051d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051aa:	4b0d      	ldr	r3, [pc, #52]	@ (80051e0 <xQueueGenericReset+0xd0>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	e009      	b.n	80051d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3310      	adds	r3, #16
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fef1 	bl	8004fa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3324      	adds	r3, #36	@ 0x24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff feec 	bl	8004fa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051d0:	f002 f8ec 	bl	80073ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051d4:	2301      	movs	r3, #1
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	e000ed04 	.word	0xe000ed04

080051e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08e      	sub	sp, #56	@ 0x38
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	e7fd      	b.n	800520c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	e7fd      	b.n	800522a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <xQueueGenericCreateStatic+0x56>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <xQueueGenericCreateStatic+0x5a>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <xQueueGenericCreateStatic+0x5c>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	623b      	str	r3, [r7, #32]
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <xQueueGenericCreateStatic+0x84>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <xQueueGenericCreateStatic+0x88>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <xQueueGenericCreateStatic+0x8a>
 800526c:	2300      	movs	r3, #0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	61fb      	str	r3, [r7, #28]
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	e7fd      	b.n	8005286 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800528a:	2350      	movs	r3, #80	@ 0x50
 800528c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b50      	cmp	r3, #80	@ 0x50
 8005292:	d00b      	beq.n	80052ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	61bb      	str	r3, [r7, #24]
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	e7fd      	b.n	80052a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80052b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f840 	bl	8005354 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3730      	adds	r7, #48	@ 0x30
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b08a      	sub	sp, #40	@ 0x28
 80052e2:	af02      	add	r7, sp, #8
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	4613      	mov	r3, r2
 80052ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <xQueueGenericCreate+0x2c>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	613b      	str	r3, [r7, #16]
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop
 8005308:	e7fd      	b.n	8005306 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3350      	adds	r3, #80	@ 0x50
 8005318:	4618      	mov	r0, r3
 800531a:	f002 f937 	bl	800758c <pvPortMalloc>
 800531e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d011      	beq.n	800534a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	3350      	adds	r3, #80	@ 0x50
 800532e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005338:	79fa      	ldrb	r2, [r7, #7]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	4613      	mov	r3, r2
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f805 	bl	8005354 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800534a:	69bb      	ldr	r3, [r7, #24]
	}
 800534c:	4618      	mov	r0, r3
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e002      	b.n	8005376 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005382:	2101      	movs	r1, #1
 8005384:	69b8      	ldr	r0, [r7, #24]
 8005386:	f7ff fec3 	bl	8005110 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08e      	sub	sp, #56	@ 0x38
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053aa:	2300      	movs	r3, #0
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <xQueueGenericSend+0x34>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <xQueueGenericSend+0x42>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSend+0x46>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSend+0x48>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <xQueueGenericSend+0x64>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	e7fd      	b.n	80053fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d103      	bne.n	800540e <xQueueGenericSend+0x72>
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <xQueueGenericSend+0x76>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueGenericSend+0x78>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <xQueueGenericSend+0x94>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	623b      	str	r3, [r7, #32]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005430:	f001 fa1a 	bl	8006868 <xTaskGetSchedulerState>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <xQueueGenericSend+0xa4>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <xQueueGenericSend+0xa8>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <xQueueGenericSend+0xaa>
 8005444:	2300      	movs	r3, #0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <xQueueGenericSend+0xc6>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	61fb      	str	r3, [r7, #28]
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	e7fd      	b.n	800545e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005462:	f001 ff71 	bl	8007348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <xQueueGenericSend+0xdc>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d129      	bne.n	80054cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800547e:	f000 fa91 	bl	80059a4 <prvCopyDataToQueue>
 8005482:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d010      	beq.n	80054ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	3324      	adds	r3, #36	@ 0x24
 8005490:	4618      	mov	r0, r3
 8005492:	f001 f829 	bl	80064e8 <xTaskRemoveFromEventList>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d013      	beq.n	80054c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800549c:	4b3f      	ldr	r3, [pc, #252]	@ (800559c <xQueueGenericSend+0x200>)
 800549e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	e00a      	b.n	80054c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054b4:	4b39      	ldr	r3, [pc, #228]	@ (800559c <xQueueGenericSend+0x200>)
 80054b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054c4:	f001 ff72 	bl	80073ac <vPortExitCritical>
				return pdPASS;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e063      	b.n	8005594 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054d2:	f001 ff6b 	bl	80073ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e05c      	b.n	8005594 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054e0:	f107 0314 	add.w	r3, r7, #20
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 f863 	bl	80065b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054ea:	2301      	movs	r3, #1
 80054ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ee:	f001 ff5d 	bl	80073ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054f2:	f000 fdd3 	bl	800609c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054f6:	f001 ff27 	bl	8007348 <vPortEnterCritical>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005500:	b25b      	sxtb	r3, r3
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005506:	d103      	bne.n	8005510 <xQueueGenericSend+0x174>
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005516:	b25b      	sxtb	r3, r3
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800551c:	d103      	bne.n	8005526 <xQueueGenericSend+0x18a>
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005526:	f001 ff41 	bl	80073ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800552a:	1d3a      	adds	r2, r7, #4
 800552c:	f107 0314 	add.w	r3, r7, #20
 8005530:	4611      	mov	r1, r2
 8005532:	4618      	mov	r0, r3
 8005534:	f001 f852 	bl	80065dc <xTaskCheckForTimeOut>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d124      	bne.n	8005588 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800553e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005540:	f000 fb28 	bl	8005b94 <prvIsQueueFull>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d018      	beq.n	800557c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	3310      	adds	r3, #16
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4611      	mov	r1, r2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 ff76 	bl	8006444 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800555a:	f000 fab3 	bl	8005ac4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800555e:	f000 fdab 	bl	80060b8 <xTaskResumeAll>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	f47f af7c 	bne.w	8005462 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800556a:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <xQueueGenericSend+0x200>)
 800556c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	e772      	b.n	8005462 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800557c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800557e:	f000 faa1 	bl	8005ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005582:	f000 fd99 	bl	80060b8 <xTaskResumeAll>
 8005586:	e76c      	b.n	8005462 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800558a:	f000 fa9b 	bl	8005ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800558e:	f000 fd93 	bl	80060b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005592:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005594:	4618      	mov	r0, r3
 8005596:	3738      	adds	r7, #56	@ 0x38
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b090      	sub	sp, #64	@ 0x40
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80055b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
 80055ce:	e7fd      	b.n	80055cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <xQueueGenericSendFromISR+0x3e>
 80055d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <xQueueGenericSendFromISR+0x42>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <xQueueGenericSendFromISR+0x44>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10b      	bne.n	8005600 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d103      	bne.n	800560e <xQueueGenericSendFromISR+0x6e>
 8005606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <xQueueGenericSendFromISR+0x72>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <xQueueGenericSendFromISR+0x74>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	623b      	str	r3, [r7, #32]
}
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	e7fd      	b.n	800562c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005630:	f001 ff6a 	bl	8007508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005634:	f3ef 8211 	mrs	r2, BASEPRI
 8005638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	61fa      	str	r2, [r7, #28]
 800564a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800564c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800564e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <xQueueGenericSendFromISR+0xc2>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d12f      	bne.n	80056c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005664:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005668:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005678:	f000 f994 	bl	80059a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800567c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005684:	d112      	bne.n	80056ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800568e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005690:	3324      	adds	r3, #36	@ 0x24
 8005692:	4618      	mov	r0, r3
 8005694:	f000 ff28 	bl	80064e8 <xTaskRemoveFromEventList>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00e      	beq.n	80056bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e007      	b.n	80056bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80056b0:	3301      	adds	r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	b25a      	sxtb	r2, r3
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80056bc:	2301      	movs	r3, #1
 80056be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80056c0:	e001      	b.n	80056c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3740      	adds	r7, #64	@ 0x40
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08c      	sub	sp, #48	@ 0x30
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <xQueueReceive+0x32>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	623b      	str	r3, [r7, #32]
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	e7fd      	b.n	800570a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <xQueueReceive+0x40>
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <xQueueReceive+0x44>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <xQueueReceive+0x46>
 8005720:	2300      	movs	r3, #0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <xQueueReceive+0x62>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	61fb      	str	r3, [r7, #28]
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	e7fd      	b.n	800573a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800573e:	f001 f893 	bl	8006868 <xTaskGetSchedulerState>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <xQueueReceive+0x72>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <xQueueReceive+0x76>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <xQueueReceive+0x78>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <xQueueReceive+0x94>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	61bb      	str	r3, [r7, #24]
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005770:	f001 fdea 	bl	8007348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01f      	beq.n	80057c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005784:	f000 f978 	bl	8005a78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	1e5a      	subs	r2, r3, #1
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00f      	beq.n	80057b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579a:	3310      	adds	r3, #16
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fea3 	bl	80064e8 <xTaskRemoveFromEventList>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057a8:	4b3c      	ldr	r3, [pc, #240]	@ (800589c <xQueueReceive+0x1c0>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057b8:	f001 fdf8 	bl	80073ac <vPortExitCritical>
				return pdPASS;
 80057bc:	2301      	movs	r3, #1
 80057be:	e069      	b.n	8005894 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057c6:	f001 fdf1 	bl	80073ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e062      	b.n	8005894 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d106      	bne.n	80057e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d4:	f107 0310 	add.w	r3, r7, #16
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fee9 	bl	80065b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057e2:	f001 fde3 	bl	80073ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e6:	f000 fc59 	bl	800609c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ea:	f001 fdad 	bl	8007348 <vPortEnterCritical>
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057f4:	b25b      	sxtb	r3, r3
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057fa:	d103      	bne.n	8005804 <xQueueReceive+0x128>
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800580a:	b25b      	sxtb	r3, r3
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005810:	d103      	bne.n	800581a <xQueueReceive+0x13e>
 8005812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800581a:	f001 fdc7 	bl	80073ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800581e:	1d3a      	adds	r2, r7, #4
 8005820:	f107 0310 	add.w	r3, r7, #16
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fed8 	bl	80065dc <xTaskCheckForTimeOut>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d123      	bne.n	800587a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005834:	f000 f998 	bl	8005b68 <prvIsQueueEmpty>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d017      	beq.n	800586e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800583e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005840:	3324      	adds	r3, #36	@ 0x24
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fdfc 	bl	8006444 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800584c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800584e:	f000 f939 	bl	8005ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005852:	f000 fc31 	bl	80060b8 <xTaskResumeAll>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d189      	bne.n	8005770 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800585c:	4b0f      	ldr	r3, [pc, #60]	@ (800589c <xQueueReceive+0x1c0>)
 800585e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	e780      	b.n	8005770 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800586e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005870:	f000 f928 	bl	8005ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005874:	f000 fc20 	bl	80060b8 <xTaskResumeAll>
 8005878:	e77a      	b.n	8005770 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800587a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800587c:	f000 f922 	bl	8005ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005880:	f000 fc1a 	bl	80060b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005884:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005886:	f000 f96f 	bl	8005b68 <prvIsQueueEmpty>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	f43f af6f 	beq.w	8005770 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005892:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005894:	4618      	mov	r0, r3
 8005896:	3730      	adds	r7, #48	@ 0x30
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08e      	sub	sp, #56	@ 0x38
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	623b      	str	r3, [r7, #32]
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	e7fd      	b.n	80058ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <xQueueReceiveFromISR+0x3c>
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <xQueueReceiveFromISR+0x40>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <xQueueReceiveFromISR+0x42>
 80058e0:	2300      	movs	r3, #0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10b      	bne.n	80058fe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	61fb      	str	r3, [r7, #28]
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	e7fd      	b.n	80058fa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058fe:	f001 fe03 	bl	8007508 <vPortValidateInterruptPriority>
	__asm volatile
 8005902:	f3ef 8211 	mrs	r2, BASEPRI
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	61ba      	str	r2, [r7, #24]
 8005918:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800591a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800591c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005922:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	2b00      	cmp	r3, #0
 8005928:	d02f      	beq.n	800598a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005938:	f000 f89e 	bl	8005a78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	1e5a      	subs	r2, r3, #1
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005944:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800594c:	d112      	bne.n	8005974 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d016      	beq.n	8005984 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	3310      	adds	r3, #16
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fdc4 	bl	80064e8 <xTaskRemoveFromEventList>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00e      	beq.n	8005984 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e007      	b.n	8005984 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005978:	3301      	adds	r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	b25a      	sxtb	r2, r3
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005984:	2301      	movs	r3, #1
 8005986:	637b      	str	r3, [r7, #52]	@ 0x34
 8005988:	e001      	b.n	800598e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800598a:	2300      	movs	r3, #0
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
 800598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005990:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f383 8811 	msr	BASEPRI, r3
}
 8005998:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800599a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800599c:	4618      	mov	r0, r3
 800599e:	3738      	adds	r7, #56	@ 0x38
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d14d      	bne.n	8005a66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 ff68 	bl	80068a4 <xTaskPriorityDisinherit>
 80059d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	609a      	str	r2, [r3, #8]
 80059dc:	e043      	b.n	8005a66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d119      	bne.n	8005a18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6858      	ldr	r0, [r3, #4]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ec:	461a      	mov	r2, r3
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	f001 ffe6 	bl	80079c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	441a      	add	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d32b      	bcc.n	8005a66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	e026      	b.n	8005a66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68d8      	ldr	r0, [r3, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	461a      	mov	r2, r3
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	f001 ffcc 	bl	80079c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a30:	425b      	negs	r3, r3
 8005a32:	441a      	add	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d207      	bcs.n	8005a54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	425b      	negs	r3, r3
 8005a4e:	441a      	add	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d105      	bne.n	8005a66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a6e:	697b      	ldr	r3, [r7, #20]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	441a      	add	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d303      	bcc.n	8005aac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68d9      	ldr	r1, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6838      	ldr	r0, [r7, #0]
 8005ab8:	f001 ff82 	bl	80079c0 <memcpy>
	}
}
 8005abc:	bf00      	nop
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005acc:	f001 fc3c 	bl	8007348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ad6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ad8:	e011      	b.n	8005afe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d012      	beq.n	8005b08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3324      	adds	r3, #36	@ 0x24
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fcfe 	bl	80064e8 <xTaskRemoveFromEventList>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005af2:	f000 fdd7 	bl	80066a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	dce9      	bgt.n	8005ada <prvUnlockQueue+0x16>
 8005b06:	e000      	b.n	8005b0a <prvUnlockQueue+0x46>
					break;
 8005b08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	22ff      	movs	r2, #255	@ 0xff
 8005b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b12:	f001 fc4b 	bl	80073ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b16:	f001 fc17 	bl	8007348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b22:	e011      	b.n	8005b48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d012      	beq.n	8005b52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3310      	adds	r3, #16
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fcd9 	bl	80064e8 <xTaskRemoveFromEventList>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b3c:	f000 fdb2 	bl	80066a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	dce9      	bgt.n	8005b24 <prvUnlockQueue+0x60>
 8005b50:	e000      	b.n	8005b54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	22ff      	movs	r2, #255	@ 0xff
 8005b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b5c:	f001 fc26 	bl	80073ac <vPortExitCritical>
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b70:	f001 fbea 	bl	8007348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e001      	b.n	8005b86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b86:	f001 fc11 	bl	80073ac <vPortExitCritical>

	return xReturn;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b9c:	f001 fbd4 	bl	8007348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d102      	bne.n	8005bb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bac:	2301      	movs	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e001      	b.n	8005bb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bb6:	f001 fbf9 	bl	80073ac <vPortExitCritical>

	return xReturn;
 8005bba:	68fb      	ldr	r3, [r7, #12]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e014      	b.n	8005bfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c14 <vQueueAddToRegistry+0x50>)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005be0:	490c      	ldr	r1, [pc, #48]	@ (8005c14 <vQueueAddToRegistry+0x50>)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bea:	4a0a      	ldr	r2, [pc, #40]	@ (8005c14 <vQueueAddToRegistry+0x50>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bf6:	e006      	b.n	8005c06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b07      	cmp	r3, #7
 8005c02:	d9e7      	bls.n	8005bd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	200007d8 	.word	0x200007d8

08005c18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c28:	f001 fb8e 	bl	8007348 <vPortEnterCritical>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c32:	b25b      	sxtb	r3, r3
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c38:	d103      	bne.n	8005c42 <vQueueWaitForMessageRestricted+0x2a>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c48:	b25b      	sxtb	r3, r3
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c4e:	d103      	bne.n	8005c58 <vQueueWaitForMessageRestricted+0x40>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c58:	f001 fba8 	bl	80073ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	3324      	adds	r3, #36	@ 0x24
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fc0f 	bl	8006490 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c72:	6978      	ldr	r0, [r7, #20]
 8005c74:	f7ff ff26 	bl	8005ac4 <prvUnlockQueue>
	}
 8005c78:	bf00      	nop
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08e      	sub	sp, #56	@ 0x38
 8005c84:	af04      	add	r7, sp, #16
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10b      	bne.n	8005cac <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	623b      	str	r3, [r7, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	e7fd      	b.n	8005ca8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <xTaskCreateStatic+0x4a>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	61fb      	str	r3, [r7, #28]
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop
 8005cc8:	e7fd      	b.n	8005cc6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cca:	235c      	movs	r3, #92	@ 0x5c
 8005ccc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005cd2:	d00b      	beq.n	8005cec <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	61bb      	str	r3, [r7, #24]
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01e      	beq.n	8005d32 <xTaskCreateStatic+0xb2>
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01b      	beq.n	8005d32 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9303      	str	r3, [sp, #12]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	9302      	str	r3, [sp, #8]
 8005d14:	f107 0314 	add.w	r3, r7, #20
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f850 	bl	8005dca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d2c:	f000 f8de 	bl	8005eec <prvAddNewTaskToReadyList>
 8005d30:	e001      	b.n	8005d36 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d36:	697b      	ldr	r3, [r7, #20]
	}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3728      	adds	r7, #40	@ 0x28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08c      	sub	sp, #48	@ 0x30
 8005d44:	af04      	add	r7, sp, #16
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fc19 	bl	800758c <pvPortMalloc>
 8005d5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d62:	205c      	movs	r0, #92	@ 0x5c
 8005d64:	f001 fc12 	bl	800758c <pvPortMalloc>
 8005d68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d76:	e005      	b.n	8005d84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d78:	6978      	ldr	r0, [r7, #20]
 8005d7a:	f001 fcd5 	bl	8007728 <vPortFree>
 8005d7e:	e001      	b.n	8005d84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d017      	beq.n	8005dba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	2300      	movs	r3, #0
 8005d96:	9303      	str	r3, [sp, #12]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	9302      	str	r3, [sp, #8]
 8005d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f80e 	bl	8005dca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dae:	69f8      	ldr	r0, [r7, #28]
 8005db0:	f000 f89c 	bl	8005eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005db4:	2301      	movs	r3, #1
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	e002      	b.n	8005dc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
	}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dda:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	461a      	mov	r2, r3
 8005de2:	21a5      	movs	r1, #165	@ 0xa5
 8005de4:	f001 fdc0 	bl	8007968 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005df2:	3b01      	subs	r3, #1
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f023 0307 	bic.w	r3, r3, #7
 8005e00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00b      	beq.n	8005e24 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	617b      	str	r3, [r7, #20]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01f      	beq.n	8005e6a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	e012      	b.n	8005e56 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	7819      	ldrb	r1, [r3, #0]
 8005e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3334      	adds	r3, #52	@ 0x34
 8005e40:	460a      	mov	r2, r1
 8005e42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d006      	beq.n	8005e5e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	3301      	adds	r3, #1
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b0f      	cmp	r3, #15
 8005e5a:	d9e9      	bls.n	8005e30 <prvInitialiseNewTask+0x66>
 8005e5c:	e000      	b.n	8005e60 <prvInitialiseNewTask+0x96>
			{
				break;
 8005e5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e68:	e003      	b.n	8005e72 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e74:	2b37      	cmp	r3, #55	@ 0x37
 8005e76:	d901      	bls.n	8005e7c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e78:	2337      	movs	r3, #55	@ 0x37
 8005e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e80:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e86:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff f8a8 	bl	8004fe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	3318      	adds	r3, #24
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff f8a3 	bl	8004fe8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	2200      	movs	r2, #0
 8005ebc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	68f9      	ldr	r1, [r7, #12]
 8005eca:	69b8      	ldr	r0, [r7, #24]
 8005ecc:	f001 f908 	bl	80070e0 <pxPortInitialiseStack>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee2:	bf00      	nop
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ef4:	f001 fa28 	bl	8007348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb0 <prvAddNewTaskToReadyList+0xc4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb0 <prvAddNewTaskToReadyList+0xc4>)
 8005f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f02:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f10:	4b27      	ldr	r3, [pc, #156]	@ (8005fb0 <prvAddNewTaskToReadyList+0xc4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d110      	bne.n	8005f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f18:	f000 fbe8 	bl	80066ec <prvInitialiseTaskLists>
 8005f1c:	e00d      	b.n	8005f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f1e:	4b26      	ldr	r3, [pc, #152]	@ (8005fb8 <prvAddNewTaskToReadyList+0xcc>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f26:	4b23      	ldr	r3, [pc, #140]	@ (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d802      	bhi.n	8005f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f34:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f3a:	4b20      	ldr	r3, [pc, #128]	@ (8005fbc <prvAddNewTaskToReadyList+0xd0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	4a1e      	ldr	r2, [pc, #120]	@ (8005fbc <prvAddNewTaskToReadyList+0xd0>)
 8005f42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f44:	4b1d      	ldr	r3, [pc, #116]	@ (8005fbc <prvAddNewTaskToReadyList+0xd0>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f50:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc0 <prvAddNewTaskToReadyList+0xd4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d903      	bls.n	8005f60 <prvAddNewTaskToReadyList+0x74>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	4a18      	ldr	r2, [pc, #96]	@ (8005fc0 <prvAddNewTaskToReadyList+0xd4>)
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4a15      	ldr	r2, [pc, #84]	@ (8005fc4 <prvAddNewTaskToReadyList+0xd8>)
 8005f6e:	441a      	add	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f7ff f843 	bl	8005002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f7c:	f001 fa16 	bl	80073ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f80:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb8 <prvAddNewTaskToReadyList+0xcc>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f88:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d207      	bcs.n	8005fa6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f96:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <prvAddNewTaskToReadyList+0xdc>)
 8005f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000cec 	.word	0x20000cec
 8005fb4:	20000818 	.word	0x20000818
 8005fb8:	20000cf8 	.word	0x20000cf8
 8005fbc:	20000d08 	.word	0x20000d08
 8005fc0:	20000cf4 	.word	0x20000cf4
 8005fc4:	2000081c 	.word	0x2000081c
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	@ 0x28
 8005fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fda:	463a      	mov	r2, r7
 8005fdc:	1d39      	adds	r1, r7, #4
 8005fde:	f107 0308 	add.w	r3, r7, #8
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe ffac 	bl	8004f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	9202      	str	r2, [sp, #8]
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	460a      	mov	r2, r1
 8005ffa:	4922      	ldr	r1, [pc, #136]	@ (8006084 <vTaskStartScheduler+0xb8>)
 8005ffc:	4822      	ldr	r0, [pc, #136]	@ (8006088 <vTaskStartScheduler+0xbc>)
 8005ffe:	f7ff fe3f 	bl	8005c80 <xTaskCreateStatic>
 8006002:	4603      	mov	r3, r0
 8006004:	4a21      	ldr	r2, [pc, #132]	@ (800608c <vTaskStartScheduler+0xc0>)
 8006006:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006008:	4b20      	ldr	r3, [pc, #128]	@ (800608c <vTaskStartScheduler+0xc0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006010:	2301      	movs	r3, #1
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	e001      	b.n	800601a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d102      	bne.n	8006026 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006020:	f000 fd04 	bl	8006a2c <xTimerCreateTimerTask>
 8006024:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d116      	bne.n	800605a <vTaskStartScheduler+0x8e>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	613b      	str	r3, [r7, #16]
}
 800603e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006040:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <vTaskStartScheduler+0xc4>)
 8006042:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006046:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006048:	4b12      	ldr	r3, [pc, #72]	@ (8006094 <vTaskStartScheduler+0xc8>)
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800604e:	4b12      	ldr	r3, [pc, #72]	@ (8006098 <vTaskStartScheduler+0xcc>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006054:	f001 f8d4 	bl	8007200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006058:	e00f      	b.n	800607a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006060:	d10b      	bne.n	800607a <vTaskStartScheduler+0xae>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	60fb      	str	r3, [r7, #12]
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	e7fd      	b.n	8006076 <vTaskStartScheduler+0xaa>
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	08007a10 	.word	0x08007a10
 8006088:	080066bd 	.word	0x080066bd
 800608c:	20000d10 	.word	0x20000d10
 8006090:	20000d0c 	.word	0x20000d0c
 8006094:	20000cf8 	.word	0x20000cf8
 8006098:	20000cf0 	.word	0x20000cf0

0800609c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060a0:	4b04      	ldr	r3, [pc, #16]	@ (80060b4 <vTaskSuspendAll+0x18>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a03      	ldr	r2, [pc, #12]	@ (80060b4 <vTaskSuspendAll+0x18>)
 80060a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060aa:	bf00      	nop
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20000d14 	.word	0x20000d14

080060b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060c6:	4b42      	ldr	r3, [pc, #264]	@ (80061d0 <xTaskResumeAll+0x118>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	603b      	str	r3, [r7, #0]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060e6:	f001 f92f 	bl	8007348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060ea:	4b39      	ldr	r3, [pc, #228]	@ (80061d0 <xTaskResumeAll+0x118>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	4a37      	ldr	r2, [pc, #220]	@ (80061d0 <xTaskResumeAll+0x118>)
 80060f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060f4:	4b36      	ldr	r3, [pc, #216]	@ (80061d0 <xTaskResumeAll+0x118>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d162      	bne.n	80061c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060fc:	4b35      	ldr	r3, [pc, #212]	@ (80061d4 <xTaskResumeAll+0x11c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d05e      	beq.n	80061c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006104:	e02f      	b.n	8006166 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006106:	4b34      	ldr	r3, [pc, #208]	@ (80061d8 <xTaskResumeAll+0x120>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3318      	adds	r3, #24
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe ffd2 	bl	80050bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3304      	adds	r3, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe ffcd 	bl	80050bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006126:	4b2d      	ldr	r3, [pc, #180]	@ (80061dc <xTaskResumeAll+0x124>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d903      	bls.n	8006136 <xTaskResumeAll+0x7e>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006132:	4a2a      	ldr	r2, [pc, #168]	@ (80061dc <xTaskResumeAll+0x124>)
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4a27      	ldr	r2, [pc, #156]	@ (80061e0 <xTaskResumeAll+0x128>)
 8006144:	441a      	add	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fe ff58 	bl	8005002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006156:	4b23      	ldr	r3, [pc, #140]	@ (80061e4 <xTaskResumeAll+0x12c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	429a      	cmp	r2, r3
 800615e:	d302      	bcc.n	8006166 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006160:	4b21      	ldr	r3, [pc, #132]	@ (80061e8 <xTaskResumeAll+0x130>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006166:	4b1c      	ldr	r3, [pc, #112]	@ (80061d8 <xTaskResumeAll+0x120>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1cb      	bne.n	8006106 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006174:	f000 fb58 	bl	8006828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006178:	4b1c      	ldr	r3, [pc, #112]	@ (80061ec <xTaskResumeAll+0x134>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d010      	beq.n	80061a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006184:	f000 f846 	bl	8006214 <xTaskIncrementTick>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800618e:	4b16      	ldr	r3, [pc, #88]	@ (80061e8 <xTaskResumeAll+0x130>)
 8006190:	2201      	movs	r2, #1
 8006192:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3b01      	subs	r3, #1
 8006198:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f1      	bne.n	8006184 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80061a0:	4b12      	ldr	r3, [pc, #72]	@ (80061ec <xTaskResumeAll+0x134>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061a6:	4b10      	ldr	r3, [pc, #64]	@ (80061e8 <xTaskResumeAll+0x130>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061ae:	2301      	movs	r3, #1
 80061b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061b2:	4b0f      	ldr	r3, [pc, #60]	@ (80061f0 <xTaskResumeAll+0x138>)
 80061b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061c2:	f001 f8f3 	bl	80073ac <vPortExitCritical>

	return xAlreadyYielded;
 80061c6:	68bb      	ldr	r3, [r7, #8]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000d14 	.word	0x20000d14
 80061d4:	20000cec 	.word	0x20000cec
 80061d8:	20000cac 	.word	0x20000cac
 80061dc:	20000cf4 	.word	0x20000cf4
 80061e0:	2000081c 	.word	0x2000081c
 80061e4:	20000818 	.word	0x20000818
 80061e8:	20000d00 	.word	0x20000d00
 80061ec:	20000cfc 	.word	0x20000cfc
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061fa:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <xTaskGetTickCount+0x1c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006200:	687b      	ldr	r3, [r7, #4]
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20000cf0 	.word	0x20000cf0

08006214 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800621a:	2300      	movs	r3, #0
 800621c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800621e:	4b4f      	ldr	r3, [pc, #316]	@ (800635c <xTaskIncrementTick+0x148>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 8090 	bne.w	8006348 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006228:	4b4d      	ldr	r3, [pc, #308]	@ (8006360 <xTaskIncrementTick+0x14c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006230:	4a4b      	ldr	r2, [pc, #300]	@ (8006360 <xTaskIncrementTick+0x14c>)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d121      	bne.n	8006280 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800623c:	4b49      	ldr	r3, [pc, #292]	@ (8006364 <xTaskIncrementTick+0x150>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	603b      	str	r3, [r7, #0]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <xTaskIncrementTick+0x46>
 800625e:	4b41      	ldr	r3, [pc, #260]	@ (8006364 <xTaskIncrementTick+0x150>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	4b40      	ldr	r3, [pc, #256]	@ (8006368 <xTaskIncrementTick+0x154>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a3e      	ldr	r2, [pc, #248]	@ (8006364 <xTaskIncrementTick+0x150>)
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4a3e      	ldr	r2, [pc, #248]	@ (8006368 <xTaskIncrementTick+0x154>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	4b3e      	ldr	r3, [pc, #248]	@ (800636c <xTaskIncrementTick+0x158>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	4a3c      	ldr	r2, [pc, #240]	@ (800636c <xTaskIncrementTick+0x158>)
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	f000 fad4 	bl	8006828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006280:	4b3b      	ldr	r3, [pc, #236]	@ (8006370 <xTaskIncrementTick+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	429a      	cmp	r2, r3
 8006288:	d349      	bcc.n	800631e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800628a:	4b36      	ldr	r3, [pc, #216]	@ (8006364 <xTaskIncrementTick+0x150>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006294:	4b36      	ldr	r3, [pc, #216]	@ (8006370 <xTaskIncrementTick+0x15c>)
 8006296:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800629a:	601a      	str	r2, [r3, #0]
					break;
 800629c:	e03f      	b.n	800631e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629e:	4b31      	ldr	r3, [pc, #196]	@ (8006364 <xTaskIncrementTick+0x150>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d203      	bcs.n	80062be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006370 <xTaskIncrementTick+0x15c>)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062bc:	e02f      	b.n	800631e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fefa 	bl	80050bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	3318      	adds	r3, #24
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe fef1 	bl	80050bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062de:	4b25      	ldr	r3, [pc, #148]	@ (8006374 <xTaskIncrementTick+0x160>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d903      	bls.n	80062ee <xTaskIncrementTick+0xda>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	4a22      	ldr	r2, [pc, #136]	@ (8006374 <xTaskIncrementTick+0x160>)
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006378 <xTaskIncrementTick+0x164>)
 80062fc:	441a      	add	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	3304      	adds	r3, #4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f7fe fe7c 	bl	8005002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	4b1b      	ldr	r3, [pc, #108]	@ (800637c <xTaskIncrementTick+0x168>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	429a      	cmp	r2, r3
 8006316:	d3b8      	bcc.n	800628a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800631c:	e7b5      	b.n	800628a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800631e:	4b17      	ldr	r3, [pc, #92]	@ (800637c <xTaskIncrementTick+0x168>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006324:	4914      	ldr	r1, [pc, #80]	@ (8006378 <xTaskIncrementTick+0x164>)
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d901      	bls.n	800633a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800633a:	4b11      	ldr	r3, [pc, #68]	@ (8006380 <xTaskIncrementTick+0x16c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e004      	b.n	8006352 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006348:	4b0e      	ldr	r3, [pc, #56]	@ (8006384 <xTaskIncrementTick+0x170>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	4a0d      	ldr	r2, [pc, #52]	@ (8006384 <xTaskIncrementTick+0x170>)
 8006350:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006352:	697b      	ldr	r3, [r7, #20]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000d14 	.word	0x20000d14
 8006360:	20000cf0 	.word	0x20000cf0
 8006364:	20000ca4 	.word	0x20000ca4
 8006368:	20000ca8 	.word	0x20000ca8
 800636c:	20000d04 	.word	0x20000d04
 8006370:	20000d0c 	.word	0x20000d0c
 8006374:	20000cf4 	.word	0x20000cf4
 8006378:	2000081c 	.word	0x2000081c
 800637c:	20000818 	.word	0x20000818
 8006380:	20000d00 	.word	0x20000d00
 8006384:	20000cfc 	.word	0x20000cfc

08006388 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800638e:	4b28      	ldr	r3, [pc, #160]	@ (8006430 <vTaskSwitchContext+0xa8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006396:	4b27      	ldr	r3, [pc, #156]	@ (8006434 <vTaskSwitchContext+0xac>)
 8006398:	2201      	movs	r2, #1
 800639a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800639c:	e042      	b.n	8006424 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800639e:	4b25      	ldr	r3, [pc, #148]	@ (8006434 <vTaskSwitchContext+0xac>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a4:	4b24      	ldr	r3, [pc, #144]	@ (8006438 <vTaskSwitchContext+0xb0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	e011      	b.n	80063d0 <vTaskSwitchContext+0x48>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <vTaskSwitchContext+0x42>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	607b      	str	r3, [r7, #4]
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	e7fd      	b.n	80063c6 <vTaskSwitchContext+0x3e>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	491a      	ldr	r1, [pc, #104]	@ (800643c <vTaskSwitchContext+0xb4>)
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0e3      	beq.n	80063ac <vTaskSwitchContext+0x24>
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4a13      	ldr	r2, [pc, #76]	@ (800643c <vTaskSwitchContext+0xb4>)
 80063f0:	4413      	add	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	3308      	adds	r3, #8
 8006406:	429a      	cmp	r2, r3
 8006408:	d104      	bne.n	8006414 <vTaskSwitchContext+0x8c>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	4a09      	ldr	r2, [pc, #36]	@ (8006440 <vTaskSwitchContext+0xb8>)
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	4a06      	ldr	r2, [pc, #24]	@ (8006438 <vTaskSwitchContext+0xb0>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6013      	str	r3, [r2, #0]
}
 8006424:	bf00      	nop
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	20000d14 	.word	0x20000d14
 8006434:	20000d00 	.word	0x20000d00
 8006438:	20000cf4 	.word	0x20000cf4
 800643c:	2000081c 	.word	0x2000081c
 8006440:	20000818 	.word	0x20000818

08006444 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10b      	bne.n	800646c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	60fb      	str	r3, [r7, #12]
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	e7fd      	b.n	8006468 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800646c:	4b07      	ldr	r3, [pc, #28]	@ (800648c <vTaskPlaceOnEventList+0x48>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3318      	adds	r3, #24
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7fe fde8 	bl	800504a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800647a:	2101      	movs	r1, #1
 800647c:	6838      	ldr	r0, [r7, #0]
 800647e:	f000 fa81 	bl	8006984 <prvAddCurrentTaskToDelayedList>
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000818 	.word	0x20000818

08006490 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	617b      	str	r3, [r7, #20]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064ba:	4b0a      	ldr	r3, [pc, #40]	@ (80064e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3318      	adds	r3, #24
 80064c0:	4619      	mov	r1, r3
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7fe fd9d 	bl	8005002 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	68b8      	ldr	r0, [r7, #8]
 80064d8:	f000 fa54 	bl	8006984 <prvAddCurrentTaskToDelayedList>
	}
 80064dc:	bf00      	nop
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000818 	.word	0x20000818

080064e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60fb      	str	r3, [r7, #12]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3318      	adds	r3, #24
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fdce 	bl	80050bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006520:	4b1d      	ldr	r3, [pc, #116]	@ (8006598 <xTaskRemoveFromEventList+0xb0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11d      	bne.n	8006564 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	3304      	adds	r3, #4
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe fdc5 	bl	80050bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006536:	4b19      	ldr	r3, [pc, #100]	@ (800659c <xTaskRemoveFromEventList+0xb4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d903      	bls.n	8006546 <xTaskRemoveFromEventList+0x5e>
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006542:	4a16      	ldr	r2, [pc, #88]	@ (800659c <xTaskRemoveFromEventList+0xb4>)
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4a13      	ldr	r2, [pc, #76]	@ (80065a0 <xTaskRemoveFromEventList+0xb8>)
 8006554:	441a      	add	r2, r3
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	3304      	adds	r3, #4
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f7fe fd50 	bl	8005002 <vListInsertEnd>
 8006562:	e005      	b.n	8006570 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	3318      	adds	r3, #24
 8006568:	4619      	mov	r1, r3
 800656a:	480e      	ldr	r0, [pc, #56]	@ (80065a4 <xTaskRemoveFromEventList+0xbc>)
 800656c:	f7fe fd49 	bl	8005002 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006574:	4b0c      	ldr	r3, [pc, #48]	@ (80065a8 <xTaskRemoveFromEventList+0xc0>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	429a      	cmp	r2, r3
 800657c:	d905      	bls.n	800658a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800657e:	2301      	movs	r3, #1
 8006580:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006582:	4b0a      	ldr	r3, [pc, #40]	@ (80065ac <xTaskRemoveFromEventList+0xc4>)
 8006584:	2201      	movs	r2, #1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e001      	b.n	800658e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800658e:	697b      	ldr	r3, [r7, #20]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000d14 	.word	0x20000d14
 800659c:	20000cf4 	.word	0x20000cf4
 80065a0:	2000081c 	.word	0x2000081c
 80065a4:	20000cac 	.word	0x20000cac
 80065a8:	20000818 	.word	0x20000818
 80065ac:	20000d00 	.word	0x20000d00

080065b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065b8:	4b06      	ldr	r3, [pc, #24]	@ (80065d4 <vTaskInternalSetTimeOutState+0x24>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065c0:	4b05      	ldr	r3, [pc, #20]	@ (80065d8 <vTaskInternalSetTimeOutState+0x28>)
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	605a      	str	r2, [r3, #4]
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	20000d04 	.word	0x20000d04
 80065d8:	20000cf0 	.word	0x20000cf0

080065dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10b      	bne.n	8006604 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	613b      	str	r3, [r7, #16]
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	e7fd      	b.n	8006600 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10b      	bne.n	8006622 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	60fb      	str	r3, [r7, #12]
}
 800661c:	bf00      	nop
 800661e:	bf00      	nop
 8006620:	e7fd      	b.n	800661e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006622:	f000 fe91 	bl	8007348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006626:	4b1d      	ldr	r3, [pc, #116]	@ (800669c <xTaskCheckForTimeOut+0xc0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800663e:	d102      	bne.n	8006646 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	e023      	b.n	800668e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4b15      	ldr	r3, [pc, #84]	@ (80066a0 <xTaskCheckForTimeOut+0xc4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d007      	beq.n	8006662 <xTaskCheckForTimeOut+0x86>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	429a      	cmp	r2, r3
 800665a:	d302      	bcc.n	8006662 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	e015      	b.n	800668e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	429a      	cmp	r2, r3
 800666a:	d20b      	bcs.n	8006684 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	1ad2      	subs	r2, r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff ff99 	bl	80065b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800667e:	2300      	movs	r3, #0
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	e004      	b.n	800668e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800668a:	2301      	movs	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800668e:	f000 fe8d 	bl	80073ac <vPortExitCritical>

	return xReturn;
 8006692:	69fb      	ldr	r3, [r7, #28]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3720      	adds	r7, #32
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000cf0 	.word	0x20000cf0
 80066a0:	20000d04 	.word	0x20000d04

080066a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066a8:	4b03      	ldr	r3, [pc, #12]	@ (80066b8 <vTaskMissedYield+0x14>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
}
 80066ae:	bf00      	nop
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	20000d00 	.word	0x20000d00

080066bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066c4:	f000 f852 	bl	800676c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066c8:	4b06      	ldr	r3, [pc, #24]	@ (80066e4 <prvIdleTask+0x28>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d9f9      	bls.n	80066c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066d0:	4b05      	ldr	r3, [pc, #20]	@ (80066e8 <prvIdleTask+0x2c>)
 80066d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066e0:	e7f0      	b.n	80066c4 <prvIdleTask+0x8>
 80066e2:	bf00      	nop
 80066e4:	2000081c 	.word	0x2000081c
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	e00c      	b.n	8006712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4a12      	ldr	r2, [pc, #72]	@ (800674c <prvInitialiseTaskLists+0x60>)
 8006704:	4413      	add	r3, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fc4e 	bl	8004fa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3301      	adds	r3, #1
 8006710:	607b      	str	r3, [r7, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b37      	cmp	r3, #55	@ 0x37
 8006716:	d9ef      	bls.n	80066f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006718:	480d      	ldr	r0, [pc, #52]	@ (8006750 <prvInitialiseTaskLists+0x64>)
 800671a:	f7fe fc45 	bl	8004fa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800671e:	480d      	ldr	r0, [pc, #52]	@ (8006754 <prvInitialiseTaskLists+0x68>)
 8006720:	f7fe fc42 	bl	8004fa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006724:	480c      	ldr	r0, [pc, #48]	@ (8006758 <prvInitialiseTaskLists+0x6c>)
 8006726:	f7fe fc3f 	bl	8004fa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800672a:	480c      	ldr	r0, [pc, #48]	@ (800675c <prvInitialiseTaskLists+0x70>)
 800672c:	f7fe fc3c 	bl	8004fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006730:	480b      	ldr	r0, [pc, #44]	@ (8006760 <prvInitialiseTaskLists+0x74>)
 8006732:	f7fe fc39 	bl	8004fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006736:	4b0b      	ldr	r3, [pc, #44]	@ (8006764 <prvInitialiseTaskLists+0x78>)
 8006738:	4a05      	ldr	r2, [pc, #20]	@ (8006750 <prvInitialiseTaskLists+0x64>)
 800673a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800673c:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <prvInitialiseTaskLists+0x7c>)
 800673e:	4a05      	ldr	r2, [pc, #20]	@ (8006754 <prvInitialiseTaskLists+0x68>)
 8006740:	601a      	str	r2, [r3, #0]
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	2000081c 	.word	0x2000081c
 8006750:	20000c7c 	.word	0x20000c7c
 8006754:	20000c90 	.word	0x20000c90
 8006758:	20000cac 	.word	0x20000cac
 800675c:	20000cc0 	.word	0x20000cc0
 8006760:	20000cd8 	.word	0x20000cd8
 8006764:	20000ca4 	.word	0x20000ca4
 8006768:	20000ca8 	.word	0x20000ca8

0800676c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006772:	e019      	b.n	80067a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006774:	f000 fde8 	bl	8007348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006778:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <prvCheckTasksWaitingTermination+0x50>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3304      	adds	r3, #4
 8006784:	4618      	mov	r0, r3
 8006786:	f7fe fc99 	bl	80050bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800678a:	4b0d      	ldr	r3, [pc, #52]	@ (80067c0 <prvCheckTasksWaitingTermination+0x54>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3b01      	subs	r3, #1
 8006790:	4a0b      	ldr	r2, [pc, #44]	@ (80067c0 <prvCheckTasksWaitingTermination+0x54>)
 8006792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006794:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <prvCheckTasksWaitingTermination+0x58>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3b01      	subs	r3, #1
 800679a:	4a0a      	ldr	r2, [pc, #40]	@ (80067c4 <prvCheckTasksWaitingTermination+0x58>)
 800679c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800679e:	f000 fe05 	bl	80073ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f810 	bl	80067c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067a8:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <prvCheckTasksWaitingTermination+0x58>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e1      	bne.n	8006774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000cc0 	.word	0x20000cc0
 80067c0:	20000cec 	.word	0x20000cec
 80067c4:	20000cd4 	.word	0x20000cd4

080067c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d108      	bne.n	80067ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 ffa2 	bl	8007728 <vPortFree>
				vPortFree( pxTCB );
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 ff9f 	bl	8007728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067ea:	e019      	b.n	8006820 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d103      	bne.n	80067fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 ff96 	bl	8007728 <vPortFree>
	}
 80067fc:	e010      	b.n	8006820 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006804:	2b02      	cmp	r3, #2
 8006806:	d00b      	beq.n	8006820 <prvDeleteTCB+0x58>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	60fb      	str	r3, [r7, #12]
}
 800681a:	bf00      	nop
 800681c:	bf00      	nop
 800681e:	e7fd      	b.n	800681c <prvDeleteTCB+0x54>
	}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682e:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <prvResetNextTaskUnblockTime+0x38>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006838:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <prvResetNextTaskUnblockTime+0x3c>)
 800683a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800683e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006840:	e008      	b.n	8006854 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006842:	4b07      	ldr	r3, [pc, #28]	@ (8006860 <prvResetNextTaskUnblockTime+0x38>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	4a04      	ldr	r2, [pc, #16]	@ (8006864 <prvResetNextTaskUnblockTime+0x3c>)
 8006852:	6013      	str	r3, [r2, #0]
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	20000ca4 	.word	0x20000ca4
 8006864:	20000d0c 	.word	0x20000d0c

08006868 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <xTaskGetSchedulerState+0x34>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d102      	bne.n	800687c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006876:	2301      	movs	r3, #1
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	e008      	b.n	800688e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800687c:	4b08      	ldr	r3, [pc, #32]	@ (80068a0 <xTaskGetSchedulerState+0x38>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006884:	2302      	movs	r3, #2
 8006886:	607b      	str	r3, [r7, #4]
 8006888:	e001      	b.n	800688e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800688e:	687b      	ldr	r3, [r7, #4]
	}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	20000cf8 	.word	0x20000cf8
 80068a0:	20000d14 	.word	0x20000d14

080068a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d058      	beq.n	800696c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006978 <xTaskPriorityDisinherit+0xd4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d00b      	beq.n	80068dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	60fb      	str	r3, [r7, #12]
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10b      	bne.n	80068fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	60bb      	str	r3, [r7, #8]
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	e7fd      	b.n	80068f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006900:	1e5a      	subs	r2, r3, #1
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690e:	429a      	cmp	r2, r3
 8006910:	d02c      	beq.n	800696c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006916:	2b00      	cmp	r3, #0
 8006918:	d128      	bne.n	800696c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	3304      	adds	r3, #4
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fbcc 	bl	80050bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693c:	4b0f      	ldr	r3, [pc, #60]	@ (800697c <xTaskPriorityDisinherit+0xd8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d903      	bls.n	800694c <xTaskPriorityDisinherit+0xa8>
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	4a0c      	ldr	r2, [pc, #48]	@ (800697c <xTaskPriorityDisinherit+0xd8>)
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4a09      	ldr	r2, [pc, #36]	@ (8006980 <xTaskPriorityDisinherit+0xdc>)
 800695a:	441a      	add	r2, r3
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	4610      	mov	r0, r2
 8006964:	f7fe fb4d 	bl	8005002 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006968:	2301      	movs	r3, #1
 800696a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800696c:	697b      	ldr	r3, [r7, #20]
	}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000818 	.word	0x20000818
 800697c:	20000cf4 	.word	0x20000cf4
 8006980:	2000081c 	.word	0x2000081c

08006984 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800698e:	4b21      	ldr	r3, [pc, #132]	@ (8006a14 <prvAddCurrentTaskToDelayedList+0x90>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006994:	4b20      	ldr	r3, [pc, #128]	@ (8006a18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3304      	adds	r3, #4
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe fb8e 	bl	80050bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069a6:	d10a      	bne.n	80069be <prvAddCurrentTaskToDelayedList+0x3a>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4619      	mov	r1, r3
 80069b6:	4819      	ldr	r0, [pc, #100]	@ (8006a1c <prvAddCurrentTaskToDelayedList+0x98>)
 80069b8:	f7fe fb23 	bl	8005002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069bc:	e026      	b.n	8006a0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4413      	add	r3, r2
 80069c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069c6:	4b14      	ldr	r3, [pc, #80]	@ (8006a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d209      	bcs.n	80069ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069d6:	4b12      	ldr	r3, [pc, #72]	@ (8006a20 <prvAddCurrentTaskToDelayedList+0x9c>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b0f      	ldr	r3, [pc, #60]	@ (8006a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4610      	mov	r0, r2
 80069e4:	f7fe fb31 	bl	800504a <vListInsert>
}
 80069e8:	e010      	b.n	8006a0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006a24 <prvAddCurrentTaskToDelayedList+0xa0>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4619      	mov	r1, r3
 80069f6:	4610      	mov	r0, r2
 80069f8:	f7fe fb27 	bl	800504a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a28 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d202      	bcs.n	8006a0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a06:	4a08      	ldr	r2, [pc, #32]	@ (8006a28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6013      	str	r3, [r2, #0]
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20000cf0 	.word	0x20000cf0
 8006a18:	20000818 	.word	0x20000818
 8006a1c:	20000cd8 	.word	0x20000cd8
 8006a20:	20000ca8 	.word	0x20000ca8
 8006a24:	20000ca4 	.word	0x20000ca4
 8006a28:	20000d0c 	.word	0x20000d0c

08006a2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08a      	sub	sp, #40	@ 0x28
 8006a30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a36:	f000 fb13 	bl	8007060 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab0 <xTimerCreateTimerTask+0x84>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d021      	beq.n	8006a86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a4a:	1d3a      	adds	r2, r7, #4
 8006a4c:	f107 0108 	add.w	r1, r7, #8
 8006a50:	f107 030c 	add.w	r3, r7, #12
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe fa8d 	bl	8004f74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	9202      	str	r2, [sp, #8]
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	2302      	movs	r3, #2
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	4911      	ldr	r1, [pc, #68]	@ (8006ab4 <xTimerCreateTimerTask+0x88>)
 8006a6e:	4812      	ldr	r0, [pc, #72]	@ (8006ab8 <xTimerCreateTimerTask+0x8c>)
 8006a70:	f7ff f906 	bl	8005c80 <xTaskCreateStatic>
 8006a74:	4603      	mov	r3, r0
 8006a76:	4a11      	ldr	r2, [pc, #68]	@ (8006abc <xTimerCreateTimerTask+0x90>)
 8006a78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a7a:	4b10      	ldr	r3, [pc, #64]	@ (8006abc <xTimerCreateTimerTask+0x90>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a82:	2301      	movs	r3, #1
 8006a84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10b      	bne.n	8006aa4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	613b      	str	r3, [r7, #16]
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006aa4:	697b      	ldr	r3, [r7, #20]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000d48 	.word	0x20000d48
 8006ab4:	08007a18 	.word	0x08007a18
 8006ab8:	08006bf9 	.word	0x08006bf9
 8006abc:	20000d4c 	.word	0x20000d4c

08006ac0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	@ 0x28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	623b      	str	r3, [r7, #32]
}
 8006aea:	bf00      	nop
 8006aec:	bf00      	nop
 8006aee:	e7fd      	b.n	8006aec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006af0:	4b19      	ldr	r3, [pc, #100]	@ (8006b58 <xTimerGenericCommand+0x98>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d02a      	beq.n	8006b4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b05      	cmp	r3, #5
 8006b08:	dc18      	bgt.n	8006b3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b0a:	f7ff fead 	bl	8006868 <xTaskGetSchedulerState>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d109      	bne.n	8006b28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b14:	4b10      	ldr	r3, [pc, #64]	@ (8006b58 <xTimerGenericCommand+0x98>)
 8006b16:	6818      	ldr	r0, [r3, #0]
 8006b18:	f107 0110 	add.w	r1, r7, #16
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b20:	f7fe fc3c 	bl	800539c <xQueueGenericSend>
 8006b24:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b26:	e012      	b.n	8006b4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b28:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <xTimerGenericCommand+0x98>)
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	f107 0110 	add.w	r1, r7, #16
 8006b30:	2300      	movs	r3, #0
 8006b32:	2200      	movs	r2, #0
 8006b34:	f7fe fc32 	bl	800539c <xQueueGenericSend>
 8006b38:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b3a:	e008      	b.n	8006b4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b3c:	4b06      	ldr	r3, [pc, #24]	@ (8006b58 <xTimerGenericCommand+0x98>)
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	f107 0110 	add.w	r1, r7, #16
 8006b44:	2300      	movs	r3, #0
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	f7fe fd2a 	bl	80055a0 <xQueueGenericSendFromISR>
 8006b4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3728      	adds	r7, #40	@ 0x28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20000d48 	.word	0x20000d48

08006b5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b66:	4b23      	ldr	r3, [pc, #140]	@ (8006bf4 <prvProcessExpiredTimer+0x98>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe faa1 	bl	80050bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d023      	beq.n	8006bd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	18d1      	adds	r1, r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	6978      	ldr	r0, [r7, #20]
 8006b96:	f000 f8d5 	bl	8006d44 <prvInsertTimerInActiveList>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d020      	beq.n	8006be2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	2100      	movs	r1, #0
 8006baa:	6978      	ldr	r0, [r7, #20]
 8006bac:	f7ff ff88 	bl	8006ac0 <xTimerGenericCommand>
 8006bb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d114      	bne.n	8006be2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	60fb      	str	r3, [r7, #12]
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	e7fd      	b.n	8006bcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	6978      	ldr	r0, [r7, #20]
 8006be8:	4798      	blx	r3
}
 8006bea:	bf00      	nop
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000d40 	.word	0x20000d40

08006bf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c00:	f107 0308 	add.w	r3, r7, #8
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 f859 	bl	8006cbc <prvGetNextExpireTime>
 8006c0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 f805 	bl	8006c20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c16:	f000 f8d7 	bl	8006dc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c1a:	bf00      	nop
 8006c1c:	e7f0      	b.n	8006c00 <prvTimerTask+0x8>
	...

08006c20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c2a:	f7ff fa37 	bl	800609c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c2e:	f107 0308 	add.w	r3, r7, #8
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 f866 	bl	8006d04 <prvSampleTimeNow>
 8006c38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d130      	bne.n	8006ca2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <prvProcessTimerOrBlockTask+0x3c>
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d806      	bhi.n	8006c5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c4e:	f7ff fa33 	bl	80060b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c52:	68f9      	ldr	r1, [r7, #12]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff ff81 	bl	8006b5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c5a:	e024      	b.n	8006ca6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c62:	4b13      	ldr	r3, [pc, #76]	@ (8006cb0 <prvProcessTimerOrBlockTask+0x90>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <prvProcessTimerOrBlockTask+0x50>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e000      	b.n	8006c72 <prvProcessTimerOrBlockTask+0x52>
 8006c70:	2300      	movs	r3, #0
 8006c72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c74:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb4 <prvProcessTimerOrBlockTask+0x94>)
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	4619      	mov	r1, r3
 8006c82:	f7fe ffc9 	bl	8005c18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c86:	f7ff fa17 	bl	80060b8 <xTaskResumeAll>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c90:	4b09      	ldr	r3, [pc, #36]	@ (8006cb8 <prvProcessTimerOrBlockTask+0x98>)
 8006c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
}
 8006ca0:	e001      	b.n	8006ca6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ca2:	f7ff fa09 	bl	80060b8 <xTaskResumeAll>
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000d44 	.word	0x20000d44
 8006cb4:	20000d48 	.word	0x20000d48
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006d00 <prvGetNextExpireTime+0x44>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <prvGetNextExpireTime+0x16>
 8006cce:	2201      	movs	r2, #1
 8006cd0:	e000      	b.n	8006cd4 <prvGetNextExpireTime+0x18>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d105      	bne.n	8006cec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ce0:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <prvGetNextExpireTime+0x44>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e001      	b.n	8006cf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000d40 	.word	0x20000d40

08006d04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d0c:	f7ff fa72 	bl	80061f4 <xTaskGetTickCount>
 8006d10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d12:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <prvSampleTimeNow+0x3c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d205      	bcs.n	8006d28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d1c:	f000 f93a 	bl	8006f94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	e002      	b.n	8006d2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d2e:	4a04      	ldr	r2, [pc, #16]	@ (8006d40 <prvSampleTimeNow+0x3c>)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d34:	68fb      	ldr	r3, [r7, #12]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000d50 	.word	0x20000d50

08006d44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d812      	bhi.n	8006d90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d302      	bcc.n	8006d7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e01b      	b.n	8006db6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d7e:	4b10      	ldr	r3, [pc, #64]	@ (8006dc0 <prvInsertTimerInActiveList+0x7c>)
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3304      	adds	r3, #4
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f7fe f95e 	bl	800504a <vListInsert>
 8006d8e:	e012      	b.n	8006db6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d206      	bcs.n	8006da6 <prvInsertTimerInActiveList+0x62>
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d302      	bcc.n	8006da6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	e007      	b.n	8006db6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006da6:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <prvInsertTimerInActiveList+0x80>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4619      	mov	r1, r3
 8006db0:	4610      	mov	r0, r2
 8006db2:	f7fe f94a 	bl	800504a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006db6:	697b      	ldr	r3, [r7, #20]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20000d44 	.word	0x20000d44
 8006dc4:	20000d40 	.word	0x20000d40

08006dc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08e      	sub	sp, #56	@ 0x38
 8006dcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dce:	e0ce      	b.n	8006f6e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	da19      	bge.n	8006e0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006dd6:	1d3b      	adds	r3, r7, #4
 8006dd8:	3304      	adds	r3, #4
 8006dda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	61fb      	str	r3, [r7, #28]
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	e7fd      	b.n	8006df6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e00:	6850      	ldr	r0, [r2, #4]
 8006e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e04:	6892      	ldr	r2, [r2, #8]
 8006e06:	4611      	mov	r1, r2
 8006e08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f2c0 80ae 	blt.w	8006f6e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	3304      	adds	r3, #4
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe f94a 	bl	80050bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e28:	463b      	mov	r3, r7
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff ff6a 	bl	8006d04 <prvSampleTimeNow>
 8006e30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b09      	cmp	r3, #9
 8006e36:	f200 8097 	bhi.w	8006f68 <prvProcessReceivedCommands+0x1a0>
 8006e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e40 <prvProcessReceivedCommands+0x78>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e69 	.word	0x08006e69
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e69 	.word	0x08006e69
 8006e4c:	08006edf 	.word	0x08006edf
 8006e50:	08006ef3 	.word	0x08006ef3
 8006e54:	08006f3f 	.word	0x08006f3f
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e69 	.word	0x08006e69
 8006e60:	08006edf 	.word	0x08006edf
 8006e64:	08006ef3 	.word	0x08006ef3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	18d1      	adds	r1, r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e88:	f7ff ff5c 	bl	8006d44 <prvInsertTimerInActiveList>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d06c      	beq.n	8006f6c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d061      	beq.n	8006f6c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	441a      	add	r2, r3
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eba:	f7ff fe01 	bl	8006ac0 <xTimerGenericCommand>
 8006ebe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d152      	bne.n	8006f6c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	61bb      	str	r3, [r7, #24]
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	e7fd      	b.n	8006eda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ef0:	e03d      	b.n	8006f6e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ef8:	f043 0301 	orr.w	r3, r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	617b      	str	r3, [r7, #20]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	18d1      	adds	r1, r2, r3
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f38:	f7ff ff04 	bl	8006d44 <prvInsertTimerInActiveList>
					break;
 8006f3c:	e017      	b.n	8006f6e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d103      	bne.n	8006f54 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006f4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f4e:	f000 fbeb 	bl	8007728 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f52:	e00c      	b.n	8006f6e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006f66:	e002      	b.n	8006f6e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006f68:	bf00      	nop
 8006f6a:	e000      	b.n	8006f6e <prvProcessReceivedCommands+0x1a6>
					break;
 8006f6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f6e:	4b08      	ldr	r3, [pc, #32]	@ (8006f90 <prvProcessReceivedCommands+0x1c8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	1d39      	adds	r1, r7, #4
 8006f74:	2200      	movs	r2, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fbb0 	bl	80056dc <xQueueReceive>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f47f af26 	bne.w	8006dd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
 8006f88:	3730      	adds	r7, #48	@ 0x30
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000d48 	.word	0x20000d48

08006f94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f9a:	e049      	b.n	8007030 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8007058 <prvSwitchTimerLists+0xc4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8007058 <prvSwitchTimerLists+0xc4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe f881 	bl	80050bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d02f      	beq.n	8007030 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d90e      	bls.n	8007000 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fee:	4b1a      	ldr	r3, [pc, #104]	@ (8007058 <prvSwitchTimerLists+0xc4>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	f7fe f826 	bl	800504a <vListInsert>
 8006ffe:	e017      	b.n	8007030 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007000:	2300      	movs	r3, #0
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	2300      	movs	r3, #0
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	2100      	movs	r1, #0
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f7ff fd58 	bl	8006ac0 <xTimerGenericCommand>
 8007010:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	603b      	str	r3, [r7, #0]
}
 800702a:	bf00      	nop
 800702c:	bf00      	nop
 800702e:	e7fd      	b.n	800702c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007030:	4b09      	ldr	r3, [pc, #36]	@ (8007058 <prvSwitchTimerLists+0xc4>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1b0      	bne.n	8006f9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800703a:	4b07      	ldr	r3, [pc, #28]	@ (8007058 <prvSwitchTimerLists+0xc4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007040:	4b06      	ldr	r3, [pc, #24]	@ (800705c <prvSwitchTimerLists+0xc8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a04      	ldr	r2, [pc, #16]	@ (8007058 <prvSwitchTimerLists+0xc4>)
 8007046:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007048:	4a04      	ldr	r2, [pc, #16]	@ (800705c <prvSwitchTimerLists+0xc8>)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6013      	str	r3, [r2, #0]
}
 800704e:	bf00      	nop
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000d40 	.word	0x20000d40
 800705c:	20000d44 	.word	0x20000d44

08007060 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007066:	f000 f96f 	bl	8007348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800706a:	4b15      	ldr	r3, [pc, #84]	@ (80070c0 <prvCheckForValidListAndQueue+0x60>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d120      	bne.n	80070b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007072:	4814      	ldr	r0, [pc, #80]	@ (80070c4 <prvCheckForValidListAndQueue+0x64>)
 8007074:	f7fd ff98 	bl	8004fa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007078:	4813      	ldr	r0, [pc, #76]	@ (80070c8 <prvCheckForValidListAndQueue+0x68>)
 800707a:	f7fd ff95 	bl	8004fa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800707e:	4b13      	ldr	r3, [pc, #76]	@ (80070cc <prvCheckForValidListAndQueue+0x6c>)
 8007080:	4a10      	ldr	r2, [pc, #64]	@ (80070c4 <prvCheckForValidListAndQueue+0x64>)
 8007082:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007084:	4b12      	ldr	r3, [pc, #72]	@ (80070d0 <prvCheckForValidListAndQueue+0x70>)
 8007086:	4a10      	ldr	r2, [pc, #64]	@ (80070c8 <prvCheckForValidListAndQueue+0x68>)
 8007088:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800708a:	2300      	movs	r3, #0
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <prvCheckForValidListAndQueue+0x74>)
 8007090:	4a11      	ldr	r2, [pc, #68]	@ (80070d8 <prvCheckForValidListAndQueue+0x78>)
 8007092:	2110      	movs	r1, #16
 8007094:	200a      	movs	r0, #10
 8007096:	f7fe f8a5 	bl	80051e4 <xQueueGenericCreateStatic>
 800709a:	4603      	mov	r3, r0
 800709c:	4a08      	ldr	r2, [pc, #32]	@ (80070c0 <prvCheckForValidListAndQueue+0x60>)
 800709e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070a0:	4b07      	ldr	r3, [pc, #28]	@ (80070c0 <prvCheckForValidListAndQueue+0x60>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070a8:	4b05      	ldr	r3, [pc, #20]	@ (80070c0 <prvCheckForValidListAndQueue+0x60>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	490b      	ldr	r1, [pc, #44]	@ (80070dc <prvCheckForValidListAndQueue+0x7c>)
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fd88 	bl	8005bc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b4:	f000 f97a 	bl	80073ac <vPortExitCritical>
}
 80070b8:	bf00      	nop
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000d48 	.word	0x20000d48
 80070c4:	20000d18 	.word	0x20000d18
 80070c8:	20000d2c 	.word	0x20000d2c
 80070cc:	20000d40 	.word	0x20000d40
 80070d0:	20000d44 	.word	0x20000d44
 80070d4:	20000df4 	.word	0x20000df4
 80070d8:	20000d54 	.word	0x20000d54
 80070dc:	08007a20 	.word	0x08007a20

080070e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3b04      	subs	r3, #4
 80070f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3b04      	subs	r3, #4
 80070fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f023 0201 	bic.w	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3b04      	subs	r3, #4
 800710e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007110:	4a0c      	ldr	r2, [pc, #48]	@ (8007144 <pxPortInitialiseStack+0x64>)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3b14      	subs	r3, #20
 800711a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3b04      	subs	r3, #4
 8007126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f06f 0202 	mvn.w	r2, #2
 800712e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3b20      	subs	r3, #32
 8007134:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	08007149 	.word	0x08007149

08007148 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007152:	4b13      	ldr	r3, [pc, #76]	@ (80071a0 <prvTaskExitError+0x58>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800715a:	d00b      	beq.n	8007174 <prvTaskExitError+0x2c>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	60fb      	str	r3, [r7, #12]
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	e7fd      	b.n	8007170 <prvTaskExitError+0x28>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	60bb      	str	r3, [r7, #8]
}
 8007186:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007188:	bf00      	nop
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0fc      	beq.n	800718a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	2000000c 	.word	0x2000000c
	...

080071b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071b0:	4b07      	ldr	r3, [pc, #28]	@ (80071d0 <pxCurrentTCBConst2>)
 80071b2:	6819      	ldr	r1, [r3, #0]
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	f380 8809 	msr	PSP, r0
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	f380 8811 	msr	BASEPRI, r0
 80071ca:	4770      	bx	lr
 80071cc:	f3af 8000 	nop.w

080071d0 <pxCurrentTCBConst2>:
 80071d0:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop

080071d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071d8:	4808      	ldr	r0, [pc, #32]	@ (80071fc <prvPortStartFirstTask+0x24>)
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	f380 8808 	msr	MSP, r0
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f380 8814 	msr	CONTROL, r0
 80071ea:	b662      	cpsie	i
 80071ec:	b661      	cpsie	f
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	df00      	svc	0
 80071f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071fa:	bf00      	nop
 80071fc:	e000ed08 	.word	0xe000ed08

08007200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007206:	4b47      	ldr	r3, [pc, #284]	@ (8007324 <xPortStartScheduler+0x124>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a47      	ldr	r2, [pc, #284]	@ (8007328 <xPortStartScheduler+0x128>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10b      	bne.n	8007228 <xPortStartScheduler+0x28>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	613b      	str	r3, [r7, #16]
}
 8007222:	bf00      	nop
 8007224:	bf00      	nop
 8007226:	e7fd      	b.n	8007224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007228:	4b3e      	ldr	r3, [pc, #248]	@ (8007324 <xPortStartScheduler+0x124>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a3f      	ldr	r2, [pc, #252]	@ (800732c <xPortStartScheduler+0x12c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d10b      	bne.n	800724a <xPortStartScheduler+0x4a>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	60fb      	str	r3, [r7, #12]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800724a:	4b39      	ldr	r3, [pc, #228]	@ (8007330 <xPortStartScheduler+0x130>)
 800724c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	22ff      	movs	r2, #255	@ 0xff
 800725a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800726c:	b2da      	uxtb	r2, r3
 800726e:	4b31      	ldr	r3, [pc, #196]	@ (8007334 <xPortStartScheduler+0x134>)
 8007270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007272:	4b31      	ldr	r3, [pc, #196]	@ (8007338 <xPortStartScheduler+0x138>)
 8007274:	2207      	movs	r2, #7
 8007276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007278:	e009      	b.n	800728e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800727a:	4b2f      	ldr	r3, [pc, #188]	@ (8007338 <xPortStartScheduler+0x138>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3b01      	subs	r3, #1
 8007280:	4a2d      	ldr	r2, [pc, #180]	@ (8007338 <xPortStartScheduler+0x138>)
 8007282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	b2db      	uxtb	r3, r3
 800728c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007296:	2b80      	cmp	r3, #128	@ 0x80
 8007298:	d0ef      	beq.n	800727a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800729a:	4b27      	ldr	r3, [pc, #156]	@ (8007338 <xPortStartScheduler+0x138>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1c3 0307 	rsb	r3, r3, #7
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d00b      	beq.n	80072be <xPortStartScheduler+0xbe>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60bb      	str	r3, [r7, #8]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072be:	4b1e      	ldr	r3, [pc, #120]	@ (8007338 <xPortStartScheduler+0x138>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007338 <xPortStartScheduler+0x138>)
 80072c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007338 <xPortStartScheduler+0x138>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80072d0:	4a19      	ldr	r2, [pc, #100]	@ (8007338 <xPortStartScheduler+0x138>)
 80072d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072dc:	4b17      	ldr	r3, [pc, #92]	@ (800733c <xPortStartScheduler+0x13c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a16      	ldr	r2, [pc, #88]	@ (800733c <xPortStartScheduler+0x13c>)
 80072e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072e8:	4b14      	ldr	r3, [pc, #80]	@ (800733c <xPortStartScheduler+0x13c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a13      	ldr	r2, [pc, #76]	@ (800733c <xPortStartScheduler+0x13c>)
 80072ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072f4:	f000 f8da 	bl	80074ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072f8:	4b11      	ldr	r3, [pc, #68]	@ (8007340 <xPortStartScheduler+0x140>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072fe:	f000 f8f9 	bl	80074f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007302:	4b10      	ldr	r3, [pc, #64]	@ (8007344 <xPortStartScheduler+0x144>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a0f      	ldr	r2, [pc, #60]	@ (8007344 <xPortStartScheduler+0x144>)
 8007308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800730c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800730e:	f7ff ff63 	bl	80071d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007312:	f7ff f839 	bl	8006388 <vTaskSwitchContext>
	prvTaskExitError();
 8007316:	f7ff ff17 	bl	8007148 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	e000ed00 	.word	0xe000ed00
 8007328:	410fc271 	.word	0x410fc271
 800732c:	410fc270 	.word	0x410fc270
 8007330:	e000e400 	.word	0xe000e400
 8007334:	20000e44 	.word	0x20000e44
 8007338:	20000e48 	.word	0x20000e48
 800733c:	e000ed20 	.word	0xe000ed20
 8007340:	2000000c 	.word	0x2000000c
 8007344:	e000ef34 	.word	0xe000ef34

08007348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	607b      	str	r3, [r7, #4]
}
 8007360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007362:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <vPortEnterCritical+0x5c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3301      	adds	r3, #1
 8007368:	4a0e      	ldr	r2, [pc, #56]	@ (80073a4 <vPortEnterCritical+0x5c>)
 800736a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800736c:	4b0d      	ldr	r3, [pc, #52]	@ (80073a4 <vPortEnterCritical+0x5c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d110      	bne.n	8007396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007374:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <vPortEnterCritical+0x60>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <vPortEnterCritical+0x4e>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	603b      	str	r3, [r7, #0]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <vPortEnterCritical+0x4a>
	}
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	2000000c 	.word	0x2000000c
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073b2:	4b12      	ldr	r3, [pc, #72]	@ (80073fc <vPortExitCritical+0x50>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <vPortExitCritical+0x26>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	607b      	str	r3, [r7, #4]
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	e7fd      	b.n	80073ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073d2:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <vPortExitCritical+0x50>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	4a08      	ldr	r2, [pc, #32]	@ (80073fc <vPortExitCritical+0x50>)
 80073da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073dc:	4b07      	ldr	r3, [pc, #28]	@ (80073fc <vPortExitCritical+0x50>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d105      	bne.n	80073f0 <vPortExitCritical+0x44>
 80073e4:	2300      	movs	r3, #0
 80073e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f383 8811 	msr	BASEPRI, r3
}
 80073ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	2000000c 	.word	0x2000000c

08007400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007400:	f3ef 8009 	mrs	r0, PSP
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	4b15      	ldr	r3, [pc, #84]	@ (8007460 <pxCurrentTCBConst>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	f01e 0f10 	tst.w	lr, #16
 8007410:	bf08      	it	eq
 8007412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741a:	6010      	str	r0, [r2, #0]
 800741c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007424:	f380 8811 	msr	BASEPRI, r0
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f7fe ffaa 	bl	8006388 <vTaskSwitchContext>
 8007434:	f04f 0000 	mov.w	r0, #0
 8007438:	f380 8811 	msr	BASEPRI, r0
 800743c:	bc09      	pop	{r0, r3}
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	6808      	ldr	r0, [r1, #0]
 8007442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007446:	f01e 0f10 	tst.w	lr, #16
 800744a:	bf08      	it	eq
 800744c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007450:	f380 8809 	msr	PSP, r0
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	f3af 8000 	nop.w

08007460 <pxCurrentTCBConst>:
 8007460:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop

08007468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	607b      	str	r3, [r7, #4]
}
 8007480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007482:	f7fe fec7 	bl	8006214 <xTaskIncrementTick>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800748c:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <xPortSysTickHandler+0x40>)
 800748e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f383 8811 	msr	BASEPRI, r3
}
 800749e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074b0:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <vPortSetupTimerInterrupt+0x34>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074b6:	4b0b      	ldr	r3, [pc, #44]	@ (80074e4 <vPortSetupTimerInterrupt+0x38>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074bc:	4b0a      	ldr	r3, [pc, #40]	@ (80074e8 <vPortSetupTimerInterrupt+0x3c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a0a      	ldr	r2, [pc, #40]	@ (80074ec <vPortSetupTimerInterrupt+0x40>)
 80074c2:	fba2 2303 	umull	r2, r3, r2, r3
 80074c6:	099b      	lsrs	r3, r3, #6
 80074c8:	4a09      	ldr	r2, [pc, #36]	@ (80074f0 <vPortSetupTimerInterrupt+0x44>)
 80074ca:	3b01      	subs	r3, #1
 80074cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ce:	4b04      	ldr	r3, [pc, #16]	@ (80074e0 <vPortSetupTimerInterrupt+0x34>)
 80074d0:	2207      	movs	r2, #7
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	e000e010 	.word	0xe000e010
 80074e4:	e000e018 	.word	0xe000e018
 80074e8:	20000000 	.word	0x20000000
 80074ec:	10624dd3 	.word	0x10624dd3
 80074f0:	e000e014 	.word	0xe000e014

080074f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007504 <vPortEnableVFP+0x10>
 80074f8:	6801      	ldr	r1, [r0, #0]
 80074fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80074fe:	6001      	str	r1, [r0, #0]
 8007500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007502:	bf00      	nop
 8007504:	e000ed88 	.word	0xe000ed88

08007508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800750e:	f3ef 8305 	mrs	r3, IPSR
 8007512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b0f      	cmp	r3, #15
 8007518:	d915      	bls.n	8007546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800751a:	4a18      	ldr	r2, [pc, #96]	@ (800757c <vPortValidateInterruptPriority+0x74>)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007524:	4b16      	ldr	r3, [pc, #88]	@ (8007580 <vPortValidateInterruptPriority+0x78>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	7afa      	ldrb	r2, [r7, #11]
 800752a:	429a      	cmp	r2, r3
 800752c:	d20b      	bcs.n	8007546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	e7fd      	b.n	8007542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007546:	4b0f      	ldr	r3, [pc, #60]	@ (8007584 <vPortValidateInterruptPriority+0x7c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800754e:	4b0e      	ldr	r3, [pc, #56]	@ (8007588 <vPortValidateInterruptPriority+0x80>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d90b      	bls.n	800756e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	603b      	str	r3, [r7, #0]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <vPortValidateInterruptPriority+0x62>
	}
 800756e:	bf00      	nop
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	e000e3f0 	.word	0xe000e3f0
 8007580:	20000e44 	.word	0x20000e44
 8007584:	e000ed0c 	.word	0xe000ed0c
 8007588:	20000e48 	.word	0x20000e48

0800758c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08a      	sub	sp, #40	@ 0x28
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007598:	f7fe fd80 	bl	800609c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800759c:	4b5c      	ldr	r3, [pc, #368]	@ (8007710 <pvPortMalloc+0x184>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075a4:	f000 f924 	bl	80077f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007714 <pvPortMalloc+0x188>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4013      	ands	r3, r2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f040 8095 	bne.w	80076e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01e      	beq.n	80075fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80075bc:	2208      	movs	r2, #8
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4413      	add	r3, r2
 80075c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d015      	beq.n	80075fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f023 0307 	bic.w	r3, r3, #7
 80075d4:	3308      	adds	r3, #8
 80075d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <pvPortMalloc+0x6e>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	617b      	str	r3, [r7, #20]
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d06f      	beq.n	80076e0 <pvPortMalloc+0x154>
 8007600:	4b45      	ldr	r3, [pc, #276]	@ (8007718 <pvPortMalloc+0x18c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	429a      	cmp	r2, r3
 8007608:	d86a      	bhi.n	80076e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800760a:	4b44      	ldr	r3, [pc, #272]	@ (800771c <pvPortMalloc+0x190>)
 800760c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800760e:	4b43      	ldr	r3, [pc, #268]	@ (800771c <pvPortMalloc+0x190>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007614:	e004      	b.n	8007620 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	429a      	cmp	r2, r3
 8007628:	d903      	bls.n	8007632 <pvPortMalloc+0xa6>
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f1      	bne.n	8007616 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007632:	4b37      	ldr	r3, [pc, #220]	@ (8007710 <pvPortMalloc+0x184>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007638:	429a      	cmp	r2, r3
 800763a:	d051      	beq.n	80076e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2208      	movs	r2, #8
 8007642:	4413      	add	r3, r2
 8007644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	1ad2      	subs	r2, r2, r3
 8007656:	2308      	movs	r3, #8
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	429a      	cmp	r2, r3
 800765c:	d920      	bls.n	80076a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800765e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4413      	add	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <pvPortMalloc+0xfc>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	613b      	str	r3, [r7, #16]
}
 8007682:	bf00      	nop
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	1ad2      	subs	r2, r2, r3
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800769a:	69b8      	ldr	r0, [r7, #24]
 800769c:	f000 f90a 	bl	80078b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007718 <pvPortMalloc+0x18c>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007718 <pvPortMalloc+0x18c>)
 80076ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007718 <pvPortMalloc+0x18c>)
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007720 <pvPortMalloc+0x194>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d203      	bcs.n	80076c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076ba:	4b17      	ldr	r3, [pc, #92]	@ (8007718 <pvPortMalloc+0x18c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a18      	ldr	r2, [pc, #96]	@ (8007720 <pvPortMalloc+0x194>)
 80076c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	4b13      	ldr	r3, [pc, #76]	@ (8007714 <pvPortMalloc+0x188>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	431a      	orrs	r2, r3
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076d6:	4b13      	ldr	r3, [pc, #76]	@ (8007724 <pvPortMalloc+0x198>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	4a11      	ldr	r2, [pc, #68]	@ (8007724 <pvPortMalloc+0x198>)
 80076de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076e0:	f7fe fcea 	bl	80060b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00b      	beq.n	8007706 <pvPortMalloc+0x17a>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	60fb      	str	r3, [r7, #12]
}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	e7fd      	b.n	8007702 <pvPortMalloc+0x176>
	return pvReturn;
 8007706:	69fb      	ldr	r3, [r7, #28]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3728      	adds	r7, #40	@ 0x28
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20001a54 	.word	0x20001a54
 8007714:	20001a68 	.word	0x20001a68
 8007718:	20001a58 	.word	0x20001a58
 800771c:	20001a4c 	.word	0x20001a4c
 8007720:	20001a5c 	.word	0x20001a5c
 8007724:	20001a60 	.word	0x20001a60

08007728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d04f      	beq.n	80077da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800773a:	2308      	movs	r3, #8
 800773c:	425b      	negs	r3, r3
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	4413      	add	r3, r2
 8007742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	4b25      	ldr	r3, [pc, #148]	@ (80077e4 <vPortFree+0xbc>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4013      	ands	r3, r2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <vPortFree+0x46>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	60fb      	str	r3, [r7, #12]
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	e7fd      	b.n	800776a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <vPortFree+0x66>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60bb      	str	r3, [r7, #8]
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	e7fd      	b.n	800778a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	4b14      	ldr	r3, [pc, #80]	@ (80077e4 <vPortFree+0xbc>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4013      	ands	r3, r2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01e      	beq.n	80077da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d11a      	bne.n	80077da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	4b0e      	ldr	r3, [pc, #56]	@ (80077e4 <vPortFree+0xbc>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	43db      	mvns	r3, r3
 80077ae:	401a      	ands	r2, r3
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077b4:	f7fe fc72 	bl	800609c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <vPortFree+0xc0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4413      	add	r3, r2
 80077c2:	4a09      	ldr	r2, [pc, #36]	@ (80077e8 <vPortFree+0xc0>)
 80077c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077c6:	6938      	ldr	r0, [r7, #16]
 80077c8:	f000 f874 	bl	80078b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077cc:	4b07      	ldr	r3, [pc, #28]	@ (80077ec <vPortFree+0xc4>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	4a06      	ldr	r2, [pc, #24]	@ (80077ec <vPortFree+0xc4>)
 80077d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077d6:	f7fe fc6f 	bl	80060b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077da:	bf00      	nop
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20001a68 	.word	0x20001a68
 80077e8:	20001a58 	.word	0x20001a58
 80077ec:	20001a64 	.word	0x20001a64

080077f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077f6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80077fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077fc:	4b27      	ldr	r3, [pc, #156]	@ (800789c <prvHeapInit+0xac>)
 80077fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3307      	adds	r3, #7
 800780e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0307 	bic.w	r3, r3, #7
 8007816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	4a1f      	ldr	r2, [pc, #124]	@ (800789c <prvHeapInit+0xac>)
 8007820:	4413      	add	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007828:	4a1d      	ldr	r2, [pc, #116]	@ (80078a0 <prvHeapInit+0xb0>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800782e:	4b1c      	ldr	r3, [pc, #112]	@ (80078a0 <prvHeapInit+0xb0>)
 8007830:	2200      	movs	r2, #0
 8007832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	4413      	add	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800783c:	2208      	movs	r2, #8
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4a15      	ldr	r2, [pc, #84]	@ (80078a4 <prvHeapInit+0xb4>)
 8007850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <prvHeapInit+0xb4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2200      	movs	r2, #0
 8007858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800785a:	4b12      	ldr	r3, [pc, #72]	@ (80078a4 <prvHeapInit+0xb4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007870:	4b0c      	ldr	r3, [pc, #48]	@ (80078a4 <prvHeapInit+0xb4>)
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4a0a      	ldr	r2, [pc, #40]	@ (80078a8 <prvHeapInit+0xb8>)
 800787e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	4a09      	ldr	r2, [pc, #36]	@ (80078ac <prvHeapInit+0xbc>)
 8007886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007888:	4b09      	ldr	r3, [pc, #36]	@ (80078b0 <prvHeapInit+0xc0>)
 800788a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800788e:	601a      	str	r2, [r3, #0]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20000e4c 	.word	0x20000e4c
 80078a0:	20001a4c 	.word	0x20001a4c
 80078a4:	20001a54 	.word	0x20001a54
 80078a8:	20001a5c 	.word	0x20001a5c
 80078ac:	20001a58 	.word	0x20001a58
 80078b0:	20001a68 	.word	0x20001a68

080078b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078bc:	4b28      	ldr	r3, [pc, #160]	@ (8007960 <prvInsertBlockIntoFreeList+0xac>)
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e002      	b.n	80078c8 <prvInsertBlockIntoFreeList+0x14>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d8f7      	bhi.n	80078c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4413      	add	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d108      	bne.n	80078f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	441a      	add	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d118      	bne.n	800793c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4b15      	ldr	r3, [pc, #84]	@ (8007964 <prvInsertBlockIntoFreeList+0xb0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	429a      	cmp	r2, r3
 8007914:	d00d      	beq.n	8007932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	441a      	add	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e008      	b.n	8007944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007932:	4b0c      	ldr	r3, [pc, #48]	@ (8007964 <prvInsertBlockIntoFreeList+0xb0>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e003      	b.n	8007944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	429a      	cmp	r2, r3
 800794a:	d002      	beq.n	8007952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20001a4c 	.word	0x20001a4c
 8007964:	20001a54 	.word	0x20001a54

08007968 <memset>:
 8007968:	4402      	add	r2, r0
 800796a:	4603      	mov	r3, r0
 800796c:	4293      	cmp	r3, r2
 800796e:	d100      	bne.n	8007972 <memset+0xa>
 8007970:	4770      	bx	lr
 8007972:	f803 1b01 	strb.w	r1, [r3], #1
 8007976:	e7f9      	b.n	800796c <memset+0x4>

08007978 <__libc_init_array>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4d0d      	ldr	r5, [pc, #52]	@ (80079b0 <__libc_init_array+0x38>)
 800797c:	4c0d      	ldr	r4, [pc, #52]	@ (80079b4 <__libc_init_array+0x3c>)
 800797e:	1b64      	subs	r4, r4, r5
 8007980:	10a4      	asrs	r4, r4, #2
 8007982:	2600      	movs	r6, #0
 8007984:	42a6      	cmp	r6, r4
 8007986:	d109      	bne.n	800799c <__libc_init_array+0x24>
 8007988:	4d0b      	ldr	r5, [pc, #44]	@ (80079b8 <__libc_init_array+0x40>)
 800798a:	4c0c      	ldr	r4, [pc, #48]	@ (80079bc <__libc_init_array+0x44>)
 800798c:	f000 f826 	bl	80079dc <_init>
 8007990:	1b64      	subs	r4, r4, r5
 8007992:	10a4      	asrs	r4, r4, #2
 8007994:	2600      	movs	r6, #0
 8007996:	42a6      	cmp	r6, r4
 8007998:	d105      	bne.n	80079a6 <__libc_init_array+0x2e>
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a0:	4798      	blx	r3
 80079a2:	3601      	adds	r6, #1
 80079a4:	e7ee      	b.n	8007984 <__libc_init_array+0xc>
 80079a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079aa:	4798      	blx	r3
 80079ac:	3601      	adds	r6, #1
 80079ae:	e7f2      	b.n	8007996 <__libc_init_array+0x1e>
 80079b0:	08007aac 	.word	0x08007aac
 80079b4:	08007aac 	.word	0x08007aac
 80079b8:	08007aac 	.word	0x08007aac
 80079bc:	08007ab0 	.word	0x08007ab0

080079c0 <memcpy>:
 80079c0:	440a      	add	r2, r1
 80079c2:	4291      	cmp	r1, r2
 80079c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80079c8:	d100      	bne.n	80079cc <memcpy+0xc>
 80079ca:	4770      	bx	lr
 80079cc:	b510      	push	{r4, lr}
 80079ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079d6:	4291      	cmp	r1, r2
 80079d8:	d1f9      	bne.n	80079ce <memcpy+0xe>
 80079da:	bd10      	pop	{r4, pc}

080079dc <_init>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	bf00      	nop
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr

080079e8 <_fini>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr
